// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_webhook

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func WebhookDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"active": schema.BoolAttribute{
				Computed:            true,
				Description:         "Whether the webhook is active",
				MarkdownDescription: "Whether the webhook is active",
			},
			"events": schema.ListAttribute{
				ElementType:         types.StringType,
				Computed:            true,
				Description:         "List of events to subscribe to",
				MarkdownDescription: "List of events to subscribe to",
			},
			"headers": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{},
				CustomType: HeadersType{
					ObjectType: types.ObjectType{
						AttrTypes: HeadersValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "A map of headers to add to each webhook call",
				MarkdownDescription: "A map of headers to add to each webhook call",
			},
			"id": schema.StringAttribute{
				Required:            true,
				Description:         "The id of the webhook",
				MarkdownDescription: "The id of the webhook",
			},
			"name": schema.StringAttribute{
				Computed:            true,
				Description:         "The custom name of the webhook",
				MarkdownDescription: "The custom name of the webhook",
			},
			"secret_headers": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{},
				CustomType: SecretHeadersType{
					ObjectType: types.ObjectType{
						AttrTypes: SecretHeadersValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "A map of headers with secret values",
				MarkdownDescription: "A map of headers with secret values",
			},
			"success_rate": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{},
				CustomType: SuccessRateType{
					ObjectType: types.ObjectType{
						AttrTypes: SuccessRateValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "Percentage of calls to the webhook that have been successful",
				MarkdownDescription: "Percentage of calls to the webhook that have been successful",
			},
			"url": schema.StringAttribute{
				Computed:            true,
				Description:         "The callback of the webhook",
				MarkdownDescription: "The callback of the webhook",
			},
		},
	}
}

type WebhookModel struct {
	Active        types.Bool         `tfsdk:"active"`
	Events        types.List         `tfsdk:"events"`
	Headers       HeadersValue       `tfsdk:"headers"`
	Id            types.String       `tfsdk:"id"`
	Name          types.String       `tfsdk:"name"`
	SecretHeaders SecretHeadersValue `tfsdk:"secret_headers"`
	SuccessRate   SuccessRateValue   `tfsdk:"success_rate"`
	Url           types.String       `tfsdk:"url"`
}

var _ basetypes.ObjectTypable = HeadersType{}

type HeadersType struct {
	basetypes.ObjectType
}

func (t HeadersType) Equal(o attr.Type) bool {
	other, ok := o.(HeadersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t HeadersType) String() string {
	return "HeadersType"
}

func (t HeadersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return HeadersValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewHeadersValueNull() HeadersValue {
	return HeadersValue{
		state: attr.ValueStateNull,
	}
}

func NewHeadersValueUnknown() HeadersValue {
	return HeadersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewHeadersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (HeadersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing HeadersValue Attribute Value",
				"While creating a HeadersValue value, a missing attribute value was detected. "+
					"A HeadersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("HeadersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid HeadersValue Attribute Type",
				"While creating a HeadersValue value, an invalid attribute value was detected. "+
					"A HeadersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("HeadersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("HeadersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra HeadersValue Attribute Value",
				"While creating a HeadersValue value, an extra attribute value was detected. "+
					"A HeadersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra HeadersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewHeadersValueUnknown(), diags
	}

	if diags.HasError() {
		return NewHeadersValueUnknown(), diags
	}

	return HeadersValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewHeadersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) HeadersValue {
	object, diags := NewHeadersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewHeadersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t HeadersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewHeadersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewHeadersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewHeadersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewHeadersValueMust(HeadersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t HeadersType) ValueType(ctx context.Context) attr.Value {
	return HeadersValue{}
}

var _ basetypes.ObjectValuable = HeadersValue{}

type HeadersValue struct {
	state attr.ValueState
}

func (v HeadersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v HeadersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v HeadersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v HeadersValue) String() string {
	return "HeadersValue"
}

func (v HeadersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v HeadersValue) Equal(o attr.Value) bool {
	other, ok := o.(HeadersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v HeadersValue) Type(ctx context.Context) attr.Type {
	return HeadersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v HeadersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}

var _ basetypes.ObjectTypable = SecretHeadersType{}

type SecretHeadersType struct {
	basetypes.ObjectType
}

func (t SecretHeadersType) Equal(o attr.Type) bool {
	other, ok := o.(SecretHeadersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SecretHeadersType) String() string {
	return "SecretHeadersType"
}

func (t SecretHeadersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return SecretHeadersValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewSecretHeadersValueNull() SecretHeadersValue {
	return SecretHeadersValue{
		state: attr.ValueStateNull,
	}
}

func NewSecretHeadersValueUnknown() SecretHeadersValue {
	return SecretHeadersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSecretHeadersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SecretHeadersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SecretHeadersValue Attribute Value",
				"While creating a SecretHeadersValue value, a missing attribute value was detected. "+
					"A SecretHeadersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SecretHeadersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SecretHeadersValue Attribute Type",
				"While creating a SecretHeadersValue value, an invalid attribute value was detected. "+
					"A SecretHeadersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SecretHeadersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SecretHeadersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SecretHeadersValue Attribute Value",
				"While creating a SecretHeadersValue value, an extra attribute value was detected. "+
					"A SecretHeadersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SecretHeadersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSecretHeadersValueUnknown(), diags
	}

	if diags.HasError() {
		return NewSecretHeadersValueUnknown(), diags
	}

	return SecretHeadersValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewSecretHeadersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SecretHeadersValue {
	object, diags := NewSecretHeadersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSecretHeadersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SecretHeadersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSecretHeadersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSecretHeadersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSecretHeadersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSecretHeadersValueMust(SecretHeadersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SecretHeadersType) ValueType(ctx context.Context) attr.Value {
	return SecretHeadersValue{}
}

var _ basetypes.ObjectValuable = SecretHeadersValue{}

type SecretHeadersValue struct {
	state attr.ValueState
}

func (v SecretHeadersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SecretHeadersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SecretHeadersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SecretHeadersValue) String() string {
	return "SecretHeadersValue"
}

func (v SecretHeadersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v SecretHeadersValue) Equal(o attr.Value) bool {
	other, ok := o.(SecretHeadersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v SecretHeadersValue) Type(ctx context.Context) attr.Type {
	return SecretHeadersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SecretHeadersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}

var _ basetypes.ObjectTypable = SuccessRateType{}

type SuccessRateType struct {
	basetypes.ObjectType
}

func (t SuccessRateType) Equal(o attr.Type) bool {
	other, ok := o.(SuccessRateType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SuccessRateType) String() string {
	return "SuccessRateType"
}

func (t SuccessRateType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return SuccessRateValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewSuccessRateValueNull() SuccessRateValue {
	return SuccessRateValue{
		state: attr.ValueStateNull,
	}
}

func NewSuccessRateValueUnknown() SuccessRateValue {
	return SuccessRateValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSuccessRateValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SuccessRateValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SuccessRateValue Attribute Value",
				"While creating a SuccessRateValue value, a missing attribute value was detected. "+
					"A SuccessRateValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SuccessRateValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SuccessRateValue Attribute Type",
				"While creating a SuccessRateValue value, an invalid attribute value was detected. "+
					"A SuccessRateValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SuccessRateValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SuccessRateValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SuccessRateValue Attribute Value",
				"While creating a SuccessRateValue value, an extra attribute value was detected. "+
					"A SuccessRateValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SuccessRateValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSuccessRateValueUnknown(), diags
	}

	if diags.HasError() {
		return NewSuccessRateValueUnknown(), diags
	}

	return SuccessRateValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewSuccessRateValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SuccessRateValue {
	object, diags := NewSuccessRateValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSuccessRateValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SuccessRateType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSuccessRateValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSuccessRateValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSuccessRateValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSuccessRateValueMust(SuccessRateValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SuccessRateType) ValueType(ctx context.Context) attr.Value {
	return SuccessRateValue{}
}

var _ basetypes.ObjectValuable = SuccessRateValue{}

type SuccessRateValue struct {
	state attr.ValueState
}

func (v SuccessRateValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SuccessRateValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SuccessRateValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SuccessRateValue) String() string {
	return "SuccessRateValue"
}

func (v SuccessRateValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v SuccessRateValue) Equal(o attr.Value) bool {
	other, ok := o.(SuccessRateValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v SuccessRateValue) Type(ctx context.Context) attr.Type {
	return SuccessRateType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SuccessRateValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}
