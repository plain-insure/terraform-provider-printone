{
    "openapi": "3.1.0",
    "paths": {
        "/v2/ab-tests": {
            "get": {
                "deprecated": false,
                "description": "Get a paginated list of abTests.",
                "operationId": "AbTest/getAbTestsList",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "Page number to retrieve. If you provide an invalid value the default page number will be applied'\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
                        "schema": {
                            "example": 1,
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of records per page.\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 200\n          </p>\n      <i><b>If provided value is greater than max value, max value will be applied.</b></i>\n      ",
                        "schema": {
                            "example": 20,
                            "type": "number"
                        }
                    },
                    {
                        "name": "filter.id",
                        "required": false,
                        "in": "query",
                        "description": "Filter by id query param.\n          <p>\n             <b>Format: </b> filter.id=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li><li>$null</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.templateId",
                        "required": false,
                        "in": "query",
                        "description": "Filter by templateId query param.\n          <p>\n             <b>Format: </b> filter.templateId=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.name",
                        "required": false,
                        "in": "query",
                        "description": "Filter by name query param.\n          <p>\n             <b>Format: </b> filter.name={$not}:OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li><li>$null</li><li>$not</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.orderTarget",
                        "required": false,
                        "in": "query",
                        "description": "Filter by orderTarget query param.\n          <p>\n             <b>Format: </b> filter.orderTarget=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$gte</li><li>$gt</li><li>$btw</li><li>$lt</li><li>$lte</li></ul>",
                        "schema": {
                            "example": "$gte:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.batchId",
                        "required": false,
                        "in": "query",
                        "description": "Filter by batchId query param.\n          <p>\n             <b>Format: </b> filter.batchId=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.status",
                        "required": false,
                        "in": "query",
                        "description": "Filter by status query param.\n          <p>\n             <b>Format: </b> filter.status={$not}:OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li><li>$not</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.createdAt",
                        "required": false,
                        "in": "query",
                        "description": "Filter by createdAt query param.\n          <p>\n             <b>Format: </b> filter.createdAt=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$gte</li><li>$gt</li><li>$btw</li><li>$lt</li><li>$lte</li></ul>",
                        "schema": {
                            "example": "$gte:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "required": false,
                        "in": "query",
                        "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC,name:ASC\n          </p>\n      <h4><b>Available Fields:</b></h4><ul><li>createdAt</li></ul>\n      ",
                        "schema": {
                            "example": "sortBy=id:DESC,createdAt:ASC",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "size",
                        "required": false,
                        "in": "query",
                        "deprecated": true,
                        "description": "Number of items per page. Default is 10, max is 50. <b>Deprecation: Use `limit` instead.</b>",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A paginated list of abTests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/PaginatedResponseDto"
                                        },
                                        {
                                            "properties": {
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/CreateAbTestResponseDto"
                                                    }
                                                },
                                                "previousUrl": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "example": "https://api.print.one/v2/abTests?page=2&size=10"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The pagination query was provided incorrectly",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse6a1ea2613cf2c41bb65e6b9eb34bea04f7ba0c4ac3abeec93be5a78e665f2d6b"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.ab.test.read</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "ab.test.read",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "A/B tests"
                ]
            }
        },
        "/v2/ab-tests/{id}": {
            "get": {
                "deprecated": false,
                "operationId": "AbTest/getAbTestById",
                "parameters": [],
                "responses": {
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.ab.test.read</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "ab.test.read",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "A/B tests"
                ]
            }
        },
        "/v2/ab-tests/{id}/events": {
            "get": {
                "deprecated": false,
                "operationId": "AbTest/abTestEventSummary",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cumulative",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "unique",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.ab.test.event.read, own.ab.test.read</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "ab.test.read",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "A/B tests"
                ]
            }
        },
        "/v2/batches": {
            "get": {
                "description": "Get a paginated list of batches.",
                "operationId": "Batch/getBatchList",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "Page number to retrieve. If you provide an invalid value the default page number will be applied'\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
                        "schema": {
                            "example": 1,
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of records per page.\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 200\n          </p>\n      <i><b>If provided value is greater than max value, max value will be applied.</b></i>\n      ",
                        "schema": {
                            "example": 20,
                            "type": "number"
                        }
                    },
                    {
                        "name": "filter.billingId",
                        "required": false,
                        "in": "query",
                        "description": "Filter by billingId query param.\n          <p>\n             <b>Format: </b> filter.billingId={$not}:OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li><li>$not</li><li>$null</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.name",
                        "required": false,
                        "in": "query",
                        "description": "Filter by name query param.\n          <p>\n             <b>Format: </b> filter.name={$not}:OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li><li>$not</li><li>$contains</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.createdAt",
                        "required": false,
                        "in": "query",
                        "description": "Filter by createdAt query param.\n          <p>\n             <b>Format: </b> filter.createdAt=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$gte</li><li>$gt</li><li>$btw</li><li>$lt</li><li>$lte</li></ul>",
                        "schema": {
                            "example": "$gte:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.updatedAt",
                        "required": false,
                        "in": "query",
                        "description": "Filter by updatedAt query param.\n          <p>\n             <b>Format: </b> filter.updatedAt=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$gte</li><li>$gt</li><li>$btw</li><li>$lt</li><li>$lte</li></ul>",
                        "schema": {
                            "example": "$gte:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.sendDate",
                        "required": false,
                        "in": "query",
                        "description": "Filter by sendDate query param.\n          <p>\n             <b>Format: </b> filter.sendDate={$not}:OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$gte</li><li>$gt</li><li>$btw</li><li>$lt</li><li>$lte</li><li>$null</li><li>$not</li></ul>",
                        "schema": {
                            "example": "$gte:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.finish",
                        "required": false,
                        "in": "query",
                        "description": "Filter by finish query param.\n          <p>\n             <b>Format: </b> filter.finish={$not}:OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li><li>$not</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.templateId",
                        "required": false,
                        "in": "query",
                        "description": "Filter by templateId query param.\n          <p>\n             <b>Format: </b> filter.templateId={$not}:OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li><li>$not</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.format",
                        "required": false,
                        "in": "query",
                        "description": "Filter by format query param.\n          <p>\n             <b>Format: </b> filter.format={$not}:OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li><li>$not</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.isBillable",
                        "required": false,
                        "in": "query",
                        "description": "Filter by isBillable query param.\n          <p>\n             <b>Format: </b> filter.isBillable={$not}:OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li><li>$not</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.archivedAt",
                        "required": false,
                        "in": "query",
                        "description": "Filter by archivedAt query param.\n          <p>\n             <b>Format: </b> filter.archivedAt={$not}:OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$null</li><li>$not</li></ul>",
                        "schema": {
                            "example": "$null:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "required": false,
                        "in": "query",
                        "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4><b>Available Fields:</b></h4><ul><li>createdAt</li><li>updatedAt</li><li>billingId</li><li>name</li><li>sendDate</li></ul>\n      ",
                        "schema": {
                            "example": "sortBy=id:DESC,createdAt:ASC",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "size",
                        "required": false,
                        "in": "query",
                        "deprecated": true,
                        "description": "Number of items per page. Default is 10, max is 50. <b>Deprecation: Use `limit` instead.</b>",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A paginated list of batches",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/PaginatedResponseDto"
                                        },
                                        {
                                            "properties": {
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/CreateBatchResponseDto"
                                                    }
                                                },
                                                "previousUrl": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "example": "https://api.print.one/v2/batches?page=2&size=10"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The pagination query was provided incorrectly",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse6a1ea2613cf2c41bb65e6b9eb34bea04f7ba0c4ac3abeec93be5a78e665f2d6b"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.batches.live.read, own.batches.test.read, all.batches.live.read, all.batches.test.read</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "live.batches.read",
                            "test.batches.read",
                            "tenant.admin",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Batches"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne, Format } from '@print-one/print-one-js';\n\nconst client = new PrintOne('<YOUR API TOKEN>');\n\nconst batches = await client.getBatches({\n  sortBy: \"createdAt:ASC\",\n  filter: {\n    format: Format.GREETINGCARD_SQ14\n  }\n});\n    "
                    }
                ]
            },
            "post": {
                "description": "Create a new batch",
                "operationId": "Batch/createBatch",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateBatchRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Details of created batch",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateBatchResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponsecf2bd91cdca5d62b1b1b238c7a6fd5f94018dca99b7afbdd639a52be61cf5456"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.batches.live.create, own.batches.test.create</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "live.batches.write",
                            "test.batches.write",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Batches"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne, Finish } from '@print-one/print-one-js';\n\nconst client = new PrintOne('<YOUR API TOKEN>');\n\nconst batch = await client.createBatch({\n  name: \"My Batch\",\n  template: \"<TEMPLATE ID>\",\n  finish: Finish.GLOSSY,\n})\n  "
                    }
                ]
            }
        },
        "/v2/batches/{batchId}": {
            "get": {
                "description": "Get a single batch by id",
                "operationId": "Batch/getBatch",
                "parameters": [
                    {
                        "name": "batchId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of batch",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateBatchResponseDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.batches.live.read, own.batches.test.read, all.batches.live.read, all.batches.test.read</code>)"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponsee57c83b2d2e0339550b8044f4236032161936ed3e3131cbe369e6867c02b256c"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "live.batches.read",
                            "test.batches.read",
                            "tenant.admin",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Batches"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\nconst client = new PrintOne(\"<YOUR API TOKEN>\");\n\nconst batch = await client.getBatch('<BATCH ID>');\n    "
                    }
                ]
            },
            "patch": {
                "description": "Update a single batch by id",
                "operationId": "Batch/updateBatch",
                "parameters": [
                    {
                        "name": "batchId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateBatchRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Details of updated batch",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateBatchResponseDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.batches.live.write, own.batches.test.write</code>)"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseebd45f598b0c24b473e0752a199790c0e775ead08cd9a36c271ea19e1cc0753f"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "live.batches.write",
                            "test.batches.write",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Batches"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\nconst client = new PrintOne(\"<YOUR API TOKEN>\");\n\nconst batch = await client.getBatch('<BATCH ID>');\n\nawait batch.update({\n  ready: true,\n});\n    "
                    }
                ]
            }
        },
        "/v2/batches/{batchId}/stats": {
            "get": {
                "description": "Get stats about a single batch",
                "operationId": "Batch/getBatchStats",
                "parameters": [
                    {
                        "name": "batchId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of batch",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateBatchResponseDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.batches.live.read, own.batches.test.read, all.batches.live.read, all.batches.test.read</code>)"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponsee57c83b2d2e0339550b8044f4236032161936ed3e3131cbe369e6867c02b256c"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "live.batches.read",
                            "test.batches.read",
                            "tenant.admin",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Batches"
                ]
            }
        },
        "/v2/batches/{batchId}/cancel": {
            "post": {
                "description": "Cancel a batch",
                "operationId": "Batch/cancelBatch",
                "parameters": [
                    {
                        "name": "batchId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Batch cancelled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateBatchResponseDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.batches.live.delete, own.batches.test.delete, all.batches.live.delete, all.batches.test.delete</code>)"
                    },
                    "404": {
                        "description": "Batch not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseebd45f598b0c24b473e0752a199790c0e775ead08cd9a36c271ea19e1cc0753f"
                                }
                            }
                        }
                    },
                    "412": {
                        "description": "Batch is not cancellable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse7bce76fdc61b59be7ec5fe74e8010fa3aaee4c8eb087e4e4a3c103d18311127a"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "live.batches.write",
                            "test.batches.write",
                            "tenant.admin",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Batches"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\nconst client = new PrintOne(\"<YOUR API TOKEN>\");\n\nconst batch = await client.getBatch('<BATCH ID>');\n\nawait batch.cancel();\n    "
                    }
                ]
            }
        },
        "/v2/batches/{batchId}/archive": {
            "post": {
                "description": "Archive a batch",
                "operationId": "Batch/archiveBatch",
                "parameters": [
                    {
                        "name": "batchId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Batch archived",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateBatchResponseDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.batches.live.delete, own.batches.test.delete, all.batches.live.delete, all.batches.test.delete</code>)"
                    },
                    "404": {
                        "description": "Batch not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseebd45f598b0c24b473e0752a199790c0e775ead08cd9a36c271ea19e1cc0753f"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "live.batches.write",
                            "test.batches.write",
                            "tenant.admin",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Batches"
                ]
            }
        },
        "/v2/batches/{batchId}/orders": {
            "get": {
                "description": "Get a paginated list of orders.",
                "operationId": "Batch/getOrderList",
                "parameters": [
                    {
                        "name": "batchId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "Page number to retrieve. If you provide an invalid value the default page number will be applied'\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
                        "schema": {
                            "example": 1,
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of records per page.\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 200\n          </p>\n      <i><b>If provided value is greater than max value, max value will be applied.</b></i>\n      ",
                        "schema": {
                            "example": 20,
                            "type": "number"
                        }
                    },
                    {
                        "name": "filter.createdAt",
                        "required": false,
                        "in": "query",
                        "description": "Filter by createdAt query param.\n          <p>\n             <b>Format: </b> filter.createdAt=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$gte</li><li>$gt</li><li>$btw</li><li>$lt</li><li>$lte</li></ul>",
                        "schema": {
                            "example": "$gte:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.friendlyStatus",
                        "required": false,
                        "in": "query",
                        "description": "Filter by friendlyStatus query param.\n          <p>\n             <b>Format: </b> filter.friendlyStatus=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.format",
                        "required": false,
                        "in": "query",
                        "description": "Filter by format query param.\n          <p>\n             <b>Format: </b> filter.format=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.finish",
                        "required": false,
                        "in": "query",
                        "description": "Filter by finish query param.\n          <p>\n             <b>Format: </b> filter.finish=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.billingId",
                        "required": false,
                        "in": "query",
                        "description": "Filter by billingId query param.\n          <p>\n             <b>Format: </b> filter.billingId={$not}:OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li><li>$not</li><li>$null</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.batchId",
                        "required": false,
                        "in": "query",
                        "description": "Filter by batchId query param.\n          <p>\n             <b>Format: </b> filter.batchId=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$null</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.anonymizedAt",
                        "required": false,
                        "in": "query",
                        "description": "Filter by anonymizedAt query param.\n          <p>\n             <b>Format: </b> filter.anonymizedAt={$not}:OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$gte</li><li>$gt</li><li>$btw</li><li>$lt</li><li>$lte</li><li>$null</li><li>$not</li></ul>",
                        "schema": {
                            "example": "$gte:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.sendDate",
                        "required": false,
                        "in": "query",
                        "description": "Filter by sendDate query param.\n          <p>\n             <b>Format: </b> filter.sendDate=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$gte</li><li>$gt</li><li>$btw</li><li>$lt</li><li>$lte</li></ul>",
                        "schema": {
                            "example": "$gte:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.csvOrderId",
                        "required": false,
                        "in": "query",
                        "description": "Filter by csvOrderId query param.\n          <p>\n             <b>Format: </b> filter.csvOrderId={$not}:OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li><li>$not</li><li>$null</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.campaignId",
                        "required": false,
                        "in": "query",
                        "description": "Filter by campaignId query param.\n          <p>\n             <b>Format: </b> filter.campaignId=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$null</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.mailingId",
                        "required": false,
                        "in": "query",
                        "description": "Filter by mailingId query param.\n          <p>\n             <b>Format: </b> filter.mailingId=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$null</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "required": false,
                        "in": "query",
                        "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4><b>Available Fields:</b></h4><ul><li>createdAt</li><li>anonymizedAt</li><li>updatedAt</li><li>status</li><li>sendDate</li></ul>\n      ",
                        "schema": {
                            "example": "sortBy=id:DESC,createdAt:ASC",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "filter.isBillable",
                        "required": false,
                        "in": "query",
                        "description": "Filter by isBillable query param.\n            <p><b>Format:</b> filter.isBillable={$not}:OPERATION:VALUE</p>\n            <h4><b>Available Operations:</b></h4>\n            <ul>\n              <li>$eq</li>\n              <li>$not</li>\n            </ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "size",
                        "required": false,
                        "in": "query",
                        "deprecated": true,
                        "description": "Number of items per page. Default is 10, max is 50. <b>Deprecation: Use `limit` instead.</b>",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A paginated list of orders",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/PaginatedResponseDto"
                                        },
                                        {
                                            "properties": {
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/CreateOrderResponse"
                                                    }
                                                },
                                                "previousUrl": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "example": "https://api.print.one/v2/orders?page=2&size=10"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The pagination query was provided incorrectly",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse6a1ea2613cf2c41bb65e6b9eb34bea04f7ba0c4ac3abeec93be5a78e665f2d6b"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.batches.live.orders.read, own.batches.test.orders.read, all.batches.live.orders.read, all.batches.test.orders.read</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "live.orders.read",
                            "test.orders.read",
                            "live.batches.write",
                            "test.batches.write",
                            "tenant.admin",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Batches"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\nconst client = new PrintOne(\"<YOUR API TOKEN>\");\n\nconst batch = await client.getBatch('<BATCH ID>');\n\nconst orders = await batch.getOrders({\n    sortBy: 'createdAt:DESC',\n    filter: {\n      friendlyStatus: 'Success'\n    }\n  });\n    "
                    }
                ]
            },
            "post": {
                "description": "Add orders to a batch",
                "operationId": "Batch/addBatchOrder",
                "parameters": [
                    {
                        "name": "batchId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddBatchOrderRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Details of created order",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddBatchOrderResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse1ec3f3bc0b904a1f76c9e55d153475c4794d2c0ac73bcdc20fe219b5a67d5d48"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.batches.live.orders.create, own.batches.test.orders.create</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "live.orders.write",
                            "test.orders.write",
                            "live.batches.write",
                            "test.batches.write",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Batches"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\nconst client = new PrintOne('<YOUR API TOKEN>');\n\nconst order = await batch.createOrder({\n  recipient: {\n    name: \"John Doe\",\n    address: \"Example Street 2\",\n    city: \"Anytown\",\n    postalCode: \"1234AB\",\n    country: \"NL\",\n  },\n  mergeVariables: {\n    test: \"Hello World\",\n  },\n});\n  "
                    }
                ]
            }
        },
        "/v2/batches/{batchId}/orders/{orderId}": {
            "get": {
                "description": "Get a single order by id",
                "operationId": "Batch/getBatchOrder",
                "parameters": [
                    {
                        "name": "batchId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of order",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddBatchOrderResponseDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.batches.live.orders.read, own.batches.test.orders.read, all.batches.live.orders.read, all.batches.test.orders.read</code>)"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponsecdc081b0263f5f2e6e0ff660cd0a334aa7042a691f79f367a891345532b291dc"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "live.orders.read",
                            "test.orders.read",
                            "live.batches.write",
                            "test.batches.write",
                            "tenant.admin",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Batches"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\nconst client = new PrintOne(\"<YOUR API TOKEN>\");\n\nconst batch = await client.getBatch('<BATCH ID>');\n\nconst order = await batch.getOrder('<ORDER ID>');\n  "
                    }
                ]
            }
        },
        "/v2/batches/{batchId}/orders/{orderId}/cancel": {
            "post": {
                "description": "Cancel an order",
                "operationId": "Batch/cancelOrder",
                "parameters": [
                    {
                        "name": "batchId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order cancelled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateOrderResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.batches.live.orders.delete, own.batches.test.orders.delete, all.batches.live.orders.delete, all.batches.test.orders.delete</code>)"
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse3daa269cf4cadd52b1749c1f095cbcbabd2cec7d55c75394c4c96900a685123b"
                                }
                            }
                        }
                    },
                    "412": {
                        "description": "Order is not cancellable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse89ca178721d7da5e0a65e255916fe9d7235f5faeae0c31f12f064c21cd38df99"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "live.orders.write",
                            "test.orders.write",
                            "live.batches.write",
                            "test.batches.write",
                            "tenant.admin",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Batches"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\nconst client = new PrintOne(\"<YOUR API TOKEN>\");\n\nconst batch = await client.getBatch('<BATCH ID>');\n\nconst order = await batch.getOrder('<ORDER ID>');\n\nawait order.cancel();\n  "
                    }
                ]
            }
        },
        "/v2/batches/{batchId}/orders/csv": {
            "post": {
                "description": "Upload a csv file with headers. Request body must be of type <code>multipart/form-data</code>.",
                "operationId": "Batch/uploadCsv",
                "parameters": [
                    {
                        "name": "batchId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isLive",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "enum": [
                                "true",
                                "false"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "mapping": {
                                        "type": "object"
                                    },
                                    "autoGenNextBatch": {
                                        "type": "bool"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "CSV file uploaded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UploadBatchCsvResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse44963b0b8df97a088e6a83ac33697d693f711b2eab7c7458590cd34332830c57"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.batches.live.orders.create, own.batches.test.orders.create</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "live.orders.write",
                            "test.orders.write",
                            "live.batches.write",
                            "test.batches.write",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Batches"
                ]
            }
        },
        "/v2/batches/{batchId}/orders/csv/{csvId}": {
            "get": {
                "description": "Get details for a CSV order",
                "operationId": "Batch/getCsvDetails",
                "parameters": [
                    {
                        "name": "batchId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "csvId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of a CSV order",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BatchCsvOrderDetailsResponseDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.batches.live.orders.read, own.batches.test.orders.read, all.batches.live.orders.read, all.batches.test.orders.read</code>)"
                    },
                    "404": {
                        "description": "CSV order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseab20e843dfc3ddd9c482f4cbccd7fcda0d1747c4f178ca6c770f09ce4e1b3176"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "live.orders.read",
                            "test.orders.read",
                            "live.batches.write",
                            "test.batches.write",
                            "tenant.admin",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Batches"
                ]
            }
        },
        "/v2/orders": {
            "post": {
                "deprecated": false,
                "description": "Create an order.",
                "operationId": "Order/createOrder",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateOrderRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Details of created order",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateOrderResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse1ec3f3bc0b904a1f76c9e55d153475c4794d2c0ac73bcdc20fe219b5a67d5d48"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.order.live.create, own.order.test.create</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "live.orders.write",
                            "test.orders.write",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Orders"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\n  const client = new PrintOne('<YOUR API TOKEN>');\n  \n  const order = await client.createOrder({\n    template: \"example-template-id\",\n    recipient: {\n      name: \"John Doe\",\n      address: \"Example Street 2\",\n      city: \"Anytown\",\n      postalCode: \"1234AB\",\n      country: \"NL\"\n    }\n  })\n    "
                    }
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Get a paginated list of orders.",
                "operationId": "Order/getOrderList",
                "parameters": [
                    {
                        "name": "billingId",
                        "required": false,
                        "in": "query",
                        "deprecated": true,
                        "description": "Filter orders that were made with this billingId. <b>Deprecation: Please use filter.createdAt instead</b>",
                        "schema": {
                            "example": "your-campaign",
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "required": false,
                        "in": "query",
                        "deprecated": true,
                        "description": "Filter orders that were made with this type. <b>Deprecation: Please use filter.isBillable instead</b>",
                        "schema": {
                            "example": "live",
                            "type": "string"
                        }
                    },
                    {
                        "name": "friendlyStatuses",
                        "required": false,
                        "in": "query",
                        "deprecated": true,
                        "description": "Filter orders that have these statuses. <b>Deprecation: Please use filter.friendlyStatus instead</b>",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "end",
                        "required": false,
                        "in": "query",
                        "deprecated": true,
                        "description": "Filter orders that were made before end date. <b>Deprecation: Please use filter.billingId instead</b>",
                        "schema": {
                            "example": "2023-12-31"
                        }
                    },
                    {
                        "name": "start",
                        "required": false,
                        "in": "query",
                        "deprecated": true,
                        "description": "Filter orders that were made after start date. <b>Deprecation: Please use filter.createdAt instead</b>",
                        "schema": {
                            "example": "2020-01-01"
                        }
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "Page number to retrieve. If you provide an invalid value the default page number will be applied'\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
                        "schema": {
                            "example": 1,
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of records per page.\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 200\n          </p>\n      <i><b>If provided value is greater than max value, max value will be applied.</b></i>\n      ",
                        "schema": {
                            "example": 20,
                            "type": "number"
                        }
                    },
                    {
                        "name": "filter.createdAt",
                        "required": false,
                        "in": "query",
                        "description": "Filter by createdAt query param.\n          <p>\n             <b>Format: </b> filter.createdAt=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$gte</li><li>$gt</li><li>$btw</li><li>$lt</li><li>$lte</li></ul>",
                        "schema": {
                            "example": "$gte:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.friendlyStatus",
                        "required": false,
                        "in": "query",
                        "description": "Filter by friendlyStatus query param.\n          <p>\n             <b>Format: </b> filter.friendlyStatus=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.format",
                        "required": false,
                        "in": "query",
                        "description": "Filter by format query param.\n          <p>\n             <b>Format: </b> filter.format=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.finish",
                        "required": false,
                        "in": "query",
                        "description": "Filter by finish query param.\n          <p>\n             <b>Format: </b> filter.finish=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.billingId",
                        "required": false,
                        "in": "query",
                        "description": "Filter by billingId query param.\n          <p>\n             <b>Format: </b> filter.billingId={$not}:OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li><li>$not</li><li>$null</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.batchId",
                        "required": false,
                        "in": "query",
                        "description": "Filter by batchId query param.\n          <p>\n             <b>Format: </b> filter.batchId=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$null</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.anonymizedAt",
                        "required": false,
                        "in": "query",
                        "description": "Filter by anonymizedAt query param.\n          <p>\n             <b>Format: </b> filter.anonymizedAt={$not}:OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$gte</li><li>$gt</li><li>$btw</li><li>$lt</li><li>$lte</li><li>$null</li><li>$not</li></ul>",
                        "schema": {
                            "example": "$gte:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.sendDate",
                        "required": false,
                        "in": "query",
                        "description": "Filter by sendDate query param.\n          <p>\n             <b>Format: </b> filter.sendDate=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$gte</li><li>$gt</li><li>$btw</li><li>$lt</li><li>$lte</li></ul>",
                        "schema": {
                            "example": "$gte:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.csvOrderId",
                        "required": false,
                        "in": "query",
                        "description": "Filter by csvOrderId query param.\n          <p>\n             <b>Format: </b> filter.csvOrderId={$not}:OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li><li>$not</li><li>$null</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.campaignId",
                        "required": false,
                        "in": "query",
                        "description": "Filter by campaignId query param.\n          <p>\n             <b>Format: </b> filter.campaignId=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$null</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.mailingId",
                        "required": false,
                        "in": "query",
                        "description": "Filter by mailingId query param.\n          <p>\n             <b>Format: </b> filter.mailingId=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$null</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "required": false,
                        "in": "query",
                        "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4><b>Available Fields:</b></h4><ul><li>createdAt</li><li>anonymizedAt</li><li>updatedAt</li><li>status</li><li>sendDate</li></ul>\n      ",
                        "schema": {
                            "example": "sortBy=id:DESC,createdAt:ASC",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "filter.isBillable",
                        "required": false,
                        "in": "query",
                        "description": "Filter by isBillable query param.\n            <p><b>Format:</b> filter.isBillable={$not}:OPERATION:VALUE</p>\n            <h4><b>Available Operations:</b></h4>\n            <ul>\n              <li>$eq</li>\n              <li>$not</li>\n            </ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "size",
                        "required": false,
                        "in": "query",
                        "deprecated": true,
                        "description": "Number of items per page. Default is 10, max is 50. <b>Deprecation: Use `limit` instead.</b>",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A paginated list of orders",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/PaginatedResponseDto"
                                        },
                                        {
                                            "properties": {
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/CreateOrderResponse"
                                                    }
                                                },
                                                "previousUrl": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "example": "https://api.print.one/v2/orders?page=2&size=10"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The pagination query was provided incorrectly",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse6a1ea2613cf2c41bb65e6b9eb34bea04f7ba0c4ac3abeec93be5a78e665f2d6b"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.order.live.read, own.order.test.read, all.order.live.read, all.order.test.read</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "live.orders.read",
                            "test.orders.read",
                            "tenant.admin",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Orders"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\n  const client = new PrintOne('<YOUR API TOKEN>');\n  \n  const orders = await client.getOrders({\n    sortBy: 'createdAt:DESC',\n    filter: {\n      friendlyStatus: 'Success'\n    }\n  });\n    "
                    }
                ]
            }
        },
        "/v2/orders/{id}": {
            "get": {
                "deprecated": false,
                "description": "Get details for an order",
                "operationId": "Order/getOrder",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of order",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateOrderResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.order.live.read, own.order.test.read, all.order.live.read, all.order.test.read</code>)"
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse3daa269cf4cadd52b1749c1f095cbcbabd2cec7d55c75394c4c96900a685123b"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "live.orders.read",
                            "test.orders.read",
                            "tenant.admin",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Orders"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\n  const client = new PrintOne('<YOUR API TOKEN>');\n  \n  const order = await client.getOrder('ord_example-order-id');\n    "
                    }
                ]
            }
        },
        "/v2/orders/{id}/cancel": {
            "post": {
                "deprecated": false,
                "description": "Cancel an order",
                "operationId": "Order/cancelOrder",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order cancelled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateOrderResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.order.live.delete, own.order.test.delete</code>)"
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse3daa269cf4cadd52b1749c1f095cbcbabd2cec7d55c75394c4c96900a685123b"
                                }
                            }
                        }
                    },
                    "412": {
                        "description": "Order is not cancellable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse89ca178721d7da5e0a65e255916fe9d7235f5faeae0c31f12f064c21cd38df99"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "live.orders.write",
                            "test.orders.write",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Orders"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\n  const client = new PrintOne('<YOUR API TOKEN>');\n  \n  const order = /* Get your order */;\n  \n  await order.cancel();\n    "
                    }
                ]
            }
        },
        "/v2/orders/csv": {
            "post": {
                "deprecated": false,
                "description": "Upload a csv file with headers. Request body must be of type <code>multipart/form-data</code>.",
                "operationId": "Order/uploadCsv",
                "parameters": [
                    {
                        "name": "isLive",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "enum": [
                                "true",
                                "false"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "mapping": {
                                        "type": "object"
                                    },
                                    "orderData": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "CSV file uploaded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UploadCsvResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse44963b0b8df97a088e6a83ac33697d693f711b2eab7c7458590cd34332830c57"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.order.live.create</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "live.orders.write",
                            "live.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Orders"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\n  const client = new PrintOne('<YOUR API TOKEN>');\n  \n  const file = Buffer.from(/* Get a CSV file */);\n\n  const csvOrder = await client.createCsvOrder({\n    mapping: {\n      recipient: {\n        city: \"{{City}}\",\n        name: \"{{FirstName}} {{LastName}}\",\n        address: \"{{Street}} {{HouseNr}}\",\n        country: \"{{Country}}\",\n        postalCode: \"{{ZIP}}\",\n      },\n      mergeVariables: {\n        name: \"{{FirstName}}\",\n        coupon: \"{{Coupon}}\",\n      },\n    },\n    template: template,\n    file: file,\n    finish: Finish.GLOSSY,\n  })\n    "
                    }
                ]
            }
        },
        "/v2/orders/csv/{id}": {
            "get": {
                "deprecated": false,
                "description": "Get details for a CSV order",
                "operationId": "Order/getCsvDetails",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of a CSV order",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CsvOrderDetailsResponseDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.order.live.read, all.order.live.read</code>)"
                    },
                    "404": {
                        "description": "CSV order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseab20e843dfc3ddd9c482f4cbccd7fcda0d1747c4f178ca6c770f09ce4e1b3176"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "live.orders.read",
                            "tenant.admin",
                            "live.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Orders"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\n  const client = new PrintOne('<YOUR API TOKEN>');\n\n  const csvOrder = await client.getCsvOrder('csv_123456789');\n    "
                    }
                ]
            }
        },
        "/v2/templates": {
            "get": {
                "deprecated": false,
                "description": "Get a paginated list of templates.",
                "operationId": "Template/getTemplateList",
                "parameters": [
                    {
                        "name": "labels",
                        "required": false,
                        "in": "query",
                        "description": "List of labels comma separated",
                        "deprecated": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "formats",
                        "required": false,
                        "in": "query",
                        "description": "List of formats comma separated",
                        "deprecated": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "Page number to retrieve. If you provide an invalid value the default page number will be applied'\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
                        "schema": {
                            "example": 1,
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of records per page.\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 200\n          </p>\n      <i><b>If provided value is greater than max value, max value will be applied.</b></i>\n      ",
                        "schema": {
                            "example": 20,
                            "type": "number"
                        }
                    },
                    {
                        "name": "filter.id",
                        "required": false,
                        "in": "query",
                        "description": "Filter by id query param.\n          <p>\n             <b>Format: </b> filter.id=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.name",
                        "required": false,
                        "in": "query",
                        "description": "Filter by name query param.\n          <p>\n             <b>Format: </b> filter.name=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.labels",
                        "required": false,
                        "in": "query",
                        "description": "Filter by labels query param.\n          <p>\n             <b>Format: </b> filter.labels=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$contains</li><li>$containss</li></ul>",
                        "schema": {
                            "example": "$contains:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.format",
                        "required": false,
                        "in": "query",
                        "description": "Filter by format query param.\n          <p>\n             <b>Format: </b> filter.format=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.deletedAt",
                        "required": false,
                        "in": "query",
                        "description": "Filter by deletedAt query param.\n          <p>\n             <b>Format: </b> filter.deletedAt={$not}:OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$null</li><li>$not</li></ul>",
                        "schema": {
                            "example": "$null:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "required": false,
                        "in": "query",
                        "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Default Value: </b> updatedAt:DESC\n          </p>\n      <h4><b>Available Fields:</b></h4><ul><li>updatedAt</li><li>name</li></ul>\n      ",
                        "schema": {
                            "example": "sortBy=id:DESC,createdAt:ASC",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "Search term to filter result values\n      <p>\n             <b>Default Value: </b> No default value\n          </p>\n      ",
                        "schema": {
                            "example": "John",
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchBy",
                        "required": false,
                        "in": "query",
                        "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4><b>Available Fields:</b></h4><ul><li>name</li></ul>\n        ",
                        "schema": {
                            "example": "name",
                            "type": "string"
                        }
                    },
                    {
                        "name": "size",
                        "required": false,
                        "in": "query",
                        "deprecated": true,
                        "description": "Number of items per page. Default is 10, max is 50. <b>Deprecation: Use `limit` instead.</b>",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A paginated list of templates",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/PaginatedResponseDto"
                                        },
                                        {
                                            "properties": {
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/GenericCompactTemplateV2Dto"
                                                    }
                                                },
                                                "previousUrl": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "example": "https://api.print.one/v2/templates?page=2&size=10"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The pagination query was provided incorrectly",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse6a1ea2613cf2c41bb65e6b9eb34bea04f7ba0c4ac3abeec93be5a78e665f2d6b"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.template.read</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "template.read",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Templates"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\n  const client = new PrintOne('<YOUR API TOKEN>');\n  \n  const templates = await client.getTemplates({\n    sortBy: 'updatedAt:DESC',\n    filter: {\n      name: 'Example Template'\n    }\n  });\n    "
                    }
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a template.",
                "operationId": "Template/createTemplate",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTemplateV2RequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Template successfully created",
                        "headers": {
                            "Content-Location": {
                                "description": "You can use this URL to directly retrieve the template",
                                "schema": {
                                    "type": "string"
                                },
                                "required": true,
                                "example": "https://api.print.one/v2/templates/tmpl_abc123567890xyz"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GenericTemplateV2Dto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse16f70e746d93a8ed68d36a4c6bcd8d794f6404d53577a2f2b64eede08ef34daa"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.template.create</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "template.write",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Templates"
                ]
            }
        },
        "/v2/templates/{id}/{version}": {
            "get": {
                "deprecated": false,
                "description": "Get a template.",
                "operationId": "Template/getTemplate",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Template ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "required": false,
                        "in": "path",
                        "description": "A specific template version",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Template",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GenericTemplateV2Dto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.template.read</code>)"
                    },
                    "404": {
                        "description": "Template not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseabe3dc35713e30395d9ba9f5d7f281eeedab4f3cd9314708b54d49b662406979"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "template.read",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Templates"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\n  const client = new PrintOne('<YOUR API TOKEN>');\n  \n  const template = await client.getTemplate('tmpl_example-template-id');\n    "
                    }
                ]
            }
        },
        "/v2/templates/preview/{id}/{version}": {
            "post": {
                "deprecated": false,
                "description": "Create a preview of a template.",
                "operationId": "Template/createTemplatePreview",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "required": false,
                        "in": "path",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "asPdf",
                        "required": false,
                        "in": "query",
                        "description": "Return the preview as a PDF instead of an image (faster)",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/PreviewTemplateDetailedRequestDto"
                                    },
                                    {
                                        "type": "object",
                                        "description": "A key-value object of merge variables.",
                                        "example": {
                                            "name": "Emma",
                                            "coupon_code": "EMMA10"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Template previews have been requested",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PreviewTemplateResponseDtoItem"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponsed684090820b16c1659bbc8c2f0db80cd44a2c2d196ff53a8fe0e5a12a565fa72"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.template.preview.create</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "template.read",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Templates"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\n  const client = new PrintOne('<YOUR API TOKEN>');\n\n  const template = /* Get your template */;\n\n  const previews = await template.preview({\n    name: 'John Doe'\n  });\n    "
                    }
                ]
            }
        },
        "/v2/templates/{id}": {
            "patch": {
                "deprecated": false,
                "description": "Update a template.",
                "operationId": "Template/updateTemplate",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Template ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTemplateV2RequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Template",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateTemplateV2ResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse16f70e746d93a8ed68d36a4c6bcd8d794f6404d53577a2f2b64eede08ef34daa"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.template.write</code>)"
                    },
                    "404": {
                        "description": "Template not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseabe3dc35713e30395d9ba9f5d7f281eeedab4f3cd9314708b54d49b662406979"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "template.write",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Templates"
                ]
            },
            "delete": {
                "deprecated": false,
                "description": "Delete a template.",
                "operationId": "Template/deleteTemplate",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Template ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted Template",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteTemplateV2ResponseDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.template.delete</code>)"
                    },
                    "404": {
                        "description": "Template not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseabe3dc35713e30395d9ba9f5d7f281eeedab4f3cd9314708b54d49b662406979"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "template.write",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Templates"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\n  const client = new PrintOne('<YOUR API TOKEN>');\n  \n  const template = /* Get your template */;\n\n  await template.delete();\n    "
                    }
                ]
            }
        },
        "/v2/templates/duplicate/{id}": {
            "post": {
                "deprecated": false,
                "description": "Duplicate a template.",
                "operationId": "Template/duplicateTemplate",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "Template ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DuplicateTemplateV2RequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Duplicated Template",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DuplicateTemplateV2ResponseDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.template.write</code>)"
                    },
                    "404": {
                        "description": "Template not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseabe3dc35713e30395d9ba9f5d7f281eeedab4f3cd9314708b54d49b662406979"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "template.write",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Templates"
                ]
            }
        },
        "/v2/storage/order/preview/{orderId}": {
            "get": {
                "description": "Retrieve an order PDF preview",
                "operationId": "Storage/getOrderPreview",
                "parameters": [
                    {
                        "name": "orderId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "inline",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Preview of order as PDF file",
                        "headers": {
                            "Content-Type": {
                                "example": "application/pdf"
                            },
                            "Content-Disposition": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "title": "Download",
                                            "description": "Will download the pdf if query 'inline=false'",
                                            "example": "attachment; filename=order-preview.pdf"
                                        },
                                        {
                                            "title": "Inline",
                                            "description": "Will render PDF in browser if query 'inline=true'",
                                            "example": "inline"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.order.live.read, own.order.test.read, all.order.live.read, all.order.test.read</code>)"
                    },
                    "404": {
                        "description": "The Order preview is currently being rendered",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseaf4eb716a0cc04bb170af2d0a1ab3fcf4229086701db258df190a9181a64cb8f"
                                }
                            }
                        }
                    },
                    "410": {
                        "description": "Order preview not available anymore",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponsefd245de3231084a134999a312f84553bb0690be46e1c4378c68e7386031e5e97"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Oauth2": [
                            "live.orders.read",
                            "test.orders.read",
                            "tenant.admin",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Previews"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\n  const client = new PrintOne('<YOUR API TOKEN>');\n  \n  const order = /* Get your order */;\n  \n  const pdf = await order.download();\n    "
                    }
                ]
            }
        },
        "/v2/storage/template/preview/{previewId}/details": {
            "get": {
                "description": "Retrieve the details of a template preview, like the image URL and errors.",
                "operationId": "Storage/getTemplatePreviewDetails",
                "parameters": [
                    {
                        "name": "previewId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "asPdf",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of template preview",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPreviewDetailsDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.template.preview.read</code>)"
                    },
                    "404": {
                        "description": "Template preview not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponsebc1f52e280de31cfbcd64b567e8dfa3dd4f36faa05bc42460913c19c0713d1c2"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Oauth2": [
                            "template.read",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Previews"
                ]
            }
        },
        "/v2/storage/template/preview/{previewId}": {
            "get": {
                "description": "Retrieve a template preview",
                "operationId": "Storage/getTemplatePreview",
                "parameters": [
                    {
                        "name": "previewId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "asPdf",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Preview of rendered template as an image"
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.template.preview.read</code>)"
                    }
                },
                "security": [
                    {
                        "Oauth2": [
                            "template.read",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Previews"
                ]
            }
        },
        "/v2/companies/me": {
            "get": {
                "description": "Get the currently logged in company.",
                "operationId": "getMe",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Your company information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CompanyGenericDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.company.me.read</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "company.read",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Companies"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\nconst client = new PrintOne('<YOUR API TOKEN>');\n\nconst company = await client.getSelf();\n"
                    }
                ]
            }
        },
        "/v2/countries": {
            "get": {
                "description": "Get a list of all supported countries. This list is always up to date and can be used to validate the country field of an order.",
                "operationId": "Country/getSupportedCountries",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "List of supported countries. This list is always up to date and can be used to validate the country field of an order.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CountryResponseDto"
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Countries"
                ]
            }
        },
        "/v2/coupons": {
            "get": {
                "description": "Get a paginated list of coupons.",
                "operationId": "Coupons/getCouponsList",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "Page number to retrieve. If you provide an invalid value the default page number will be applied'\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
                        "schema": {
                            "example": 1,
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of records per page.\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 200\n          </p>\n      <i><b>If provided value is greater than max value, max value will be applied.</b></i>\n      ",
                        "schema": {
                            "example": 20,
                            "type": "number"
                        }
                    },
                    {
                        "name": "filter.name",
                        "required": false,
                        "in": "query",
                        "description": "Filter by name query param.\n          <p>\n             <b>Format: </b> filter.name=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.createdAt",
                        "required": false,
                        "in": "query",
                        "description": "Filter by createdAt query param.\n          <p>\n             <b>Format: </b> filter.createdAt=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$gte</li><li>$gt</li><li>$btw</li><li>$lt</li><li>$lte</li></ul>",
                        "schema": {
                            "example": "$gte:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "required": false,
                        "in": "query",
                        "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4><b>Available Fields:</b></h4><ul><li>createdAt</li><li>name</li></ul>\n      ",
                        "schema": {
                            "example": "sortBy=id:DESC,createdAt:ASC",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "size",
                        "required": false,
                        "in": "query",
                        "deprecated": true,
                        "description": "Number of items per page. Default is 10, max is 50. <b>Deprecation: Use `limit` instead.</b>",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A paginated list of coupons",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/PaginatedResponseDto"
                                        },
                                        {
                                            "properties": {
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/CouponDto"
                                                    }
                                                },
                                                "previousUrl": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "example": "https://api.print.one/v2/coupons?page=2&size=10"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The pagination query was provided incorrectly",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse6a1ea2613cf2c41bb65e6b9eb34bea04f7ba0c4ac3abeec93be5a78e665f2d6b"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.coupons.read</code>)"
                    }
                },
                "security": [
                    {
                        "Oauth2": [
                            "coupons.read",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Coupons"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\nconst client = new PrintOne('<YOUR API TOKEN>');\n\nconst coupon = await client.getCoupons({\n  page: 1,\n  limit: 20,\n  filter: {\n    name: \"test\",\n  },\n})\n    "
                    }
                ]
            },
            "post": {
                "operationId": "Coupons/createCoupon",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateCouponDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Coupon was created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CouponDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.coupons.create</code>)"
                    }
                },
                "security": [
                    {
                        "Oauth2": [
                            "coupons.write",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "tags": [
                    "Coupons"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\nconst client = new PrintOne('<YOUR API TOKEN>');\n\nconst coupon = await client.createCoupon({\n  name: \"Coupon\",\n})\n    "
                    }
                ]
            }
        },
        "/v2/coupons/usage": {
            "get": {
                "description": "Registers a purchase with the coupon code",
                "operationId": "Coupons/registerPurchase",
                "parameters": [
                    {
                        "name": "code",
                        "required": true,
                        "in": "path",
                        "description": "The coupon code.",
                        "schema": {
                            "example": "30OFF",
                            "type": "string"
                        }
                    },
                    {
                        "name": "amount",
                        "required": true,
                        "in": "path",
                        "description": "The amount of the purchase.",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Purchase registered successfully"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "summary": "",
                "tags": [
                    "Coupons"
                ]
            }
        },
        "/v2/coupons/{id}": {
            "get": {
                "operationId": "Coupons/getCoupon",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the coupon",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The coupon",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CouponDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.coupons.read</code>)"
                    },
                    "404": {
                        "description": "Coupon not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse352c8d6544bab884304b2e571acb970dd2414f1f2488c0c5a84555d639eefb76"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Oauth2": [
                            "coupons.read",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "tags": [
                    "Coupons"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\nconst client = new PrintOne('<YOUR API TOKEN>');\n\nconst coupon = await client.getCoupon(\"example-coupon-id\")\n    "
                    }
                ]
            },
            "delete": {
                "operationId": "Coupons/deleteCoupon",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the coupon",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Coupon was successfully deleted"
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.coupons.delete</code>)"
                    },
                    "404": {
                        "description": "Coupon not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse352c8d6544bab884304b2e571acb970dd2414f1f2488c0c5a84555d639eefb76"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Oauth2": [
                            "coupons.write",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "tags": [
                    "Coupons"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\nconst client = new PrintOne('<YOUR API TOKEN>');\n\nconst coupon = /* Get your coupon */;\n\nawait coupon.delete();\n    "
                    }
                ]
            },
            "post": {
                "operationId": "Coupons/importCouponCodes",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the coupon",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The coupon codes were successfully uploaded"
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.coupons.create</code>)"
                    },
                    "404": {
                        "description": "Coupon not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse352c8d6544bab884304b2e571acb970dd2414f1f2488c0c5a84555d639eefb76"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Oauth2": [
                            "coupons.write",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "tags": [
                    "Coupons"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\nconst client = new PrintOne('<YOUR API TOKEN>');\n\nconst coupon = /* Get your coupon */;\n\nconst data = fs.readFileSync(\"example.csv\").buffer;\nconst file = await coupon.addCodes(data);\n    "
                    }
                ]
            }
        },
        "/v2/coupons/{id}/codes": {
            "get": {
                "description": "Get a paginated list of coupons.",
                "operationId": "Coupons/getCouponCodesList",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the coupon",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "Page number to retrieve. If you provide an invalid value the default page number will be applied'\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
                        "schema": {
                            "example": 1,
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of records per page.\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 200\n          </p>\n      <i><b>If provided value is greater than max value, max value will be applied.</b></i>\n      ",
                        "schema": {
                            "example": 20,
                            "type": "number"
                        }
                    },
                    {
                        "name": "filter.createdAt",
                        "required": false,
                        "in": "query",
                        "description": "Filter by createdAt query param.\n          <p>\n             <b>Format: </b> filter.createdAt=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$gte</li><li>$gt</li><li>$btw</li><li>$lt</li><li>$lte</li></ul>",
                        "schema": {
                            "example": "$gte:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "required": false,
                        "in": "query",
                        "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4><b>Available Fields:</b></h4><ul><li>createdAt</li><li>used</li></ul>\n      ",
                        "schema": {
                            "example": "sortBy=id:DESC,createdAt:ASC",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "size",
                        "required": false,
                        "in": "query",
                        "deprecated": true,
                        "description": "Number of items per page. Default is 10, max is 50. <b>Deprecation: Use `limit` instead.</b>",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A paginated list of coupons",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/PaginatedResponseDto"
                                        },
                                        {
                                            "properties": {
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/CouponCodeDto"
                                                    }
                                                },
                                                "previousUrl": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "example": "https://api.print.one/v2/coupons?page=2&size=10"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The pagination query was provided incorrectly",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse6a1ea2613cf2c41bb65e6b9eb34bea04f7ba0c4ac3abeec93be5a78e665f2d6b"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.coupons.read</code>)"
                    },
                    "404": {
                        "description": "Coupon not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse352c8d6544bab884304b2e571acb970dd2414f1f2488c0c5a84555d639eefb76"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Oauth2": [
                            "coupons.read",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Coupons"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\nconst client = new PrintOne('<YOUR API TOKEN>');\n\nconst coupon = /* Get your coupon */;\n\nconst couponCodes = await coupon.getCodes();\n    "
                    }
                ]
            }
        },
        "/v2/coupons/{id}/codes/{codeId}": {
            "get": {
                "operationId": "Coupons/getCouponCode",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the coupon",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "codeId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the coupon code",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The fetched coupon code",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CouponCodeDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.coupons.read</code>)"
                    },
                    "404": {
                        "description": "Coupon not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse352c8d6544bab884304b2e571acb970dd2414f1f2488c0c5a84555d639eefb76"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Oauth2": [
                            "coupons.read",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "tags": [
                    "Coupons"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\nconst client = new PrintOne('<YOUR API TOKEN>');\n\nconst coupon = /* Get your coupon */;\n\nconst couponCodes = await coupon.getCode(\"example-coupon-code-id\");\n    "
                    }
                ]
            }
        },
        "/v2/customfiles": {
            "get": {
                "description": "Get a paginated list of customfiles.",
                "operationId": "CustomFiles/getCustomFileList",
                "parameters": [
                    {
                        "name": "sort",
                        "required": false,
                        "in": "query",
                        "deprecated": true,
                        "description": "The sort direction",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "required": false,
                        "in": "query",
                        "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4><b>Available Fields:</b></h4><ul><li>createdAt</li><li>fileName</li><li>size</li><li>id</li><li>fileExtension</li></ul>\n      ",
                        "schema": {
                            "example": "sortBy=id:DESC,createdAt:ASC",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "Number of the page to retrieve. Default is page 1.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "size",
                        "required": false,
                        "in": "query",
                        "deprecated": true,
                        "description": "Number of items per page. Default is 10, max is 50. <b>Deprecation: Use `limit` instead.</b>",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of records per page.\n      <p>\n             <b>Default Value: </b> 25\n          </p>\n      <p>\n             <b>Max Value: </b> 200\n          </p>\n      <i><b>If provided value is greater than max value, max value will be applied.</b></i>\n      ",
                        "schema": {
                            "example": 20,
                            "type": "number"
                        }
                    },
                    {
                        "name": "filter.fileName",
                        "required": false,
                        "in": "query",
                        "description": "Filter by fileName query param.\n          <p>\n             <b>Format: </b> filter.fileName=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.fileExtension",
                        "required": false,
                        "in": "query",
                        "description": "Filter by fileExtension query param.\n          <p>\n             <b>Format: </b> filter.fileExtension=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "Search term to filter result values\n      <p>\n             <b>Default Value: </b> No default value\n          </p>\n      ",
                        "schema": {
                            "example": "John",
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchBy",
                        "required": false,
                        "in": "query",
                        "description": "List of fields to search by term to filter result values\n        <p>\n             <b>Default Value: </b> By default all fields mentioned below will be used to search by term\n          </p>\n        <h4><b>Available Fields:</b></h4><ul><li>fileName</li></ul>\n        ",
                        "schema": {
                            "example": "fileName",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A paginated list of customfiles",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/PaginatedResponseDto"
                                        },
                                        {
                                            "properties": {
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/CustomFileGenericResponseDto"
                                                    }
                                                },
                                                "previousUrl": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "example": "https://api.print.one/v2/customfiles?page=2&size=10"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The pagination query was provided incorrectly",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse6a1ea2613cf2c41bb65e6b9eb34bea04f7ba0c4ac3abeec93be5a78e665f2d6b"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.customfile.read</code>)"
                    }
                },
                "security": [
                    {
                        "Oauth2": [
                            "customfile.read",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Custom files"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\nconst client = new PrintOne('<YOUR API TOKEN>');\n\nconst files = await client.getCustomFiles({\n  limit: 50,\n  sortBy: 'size:ASC'\n});\n"
                    }
                ]
            },
            "post": {
                "description": "Upload a custom file. Request body must be of type <code>multipart/form-data</code>.",
                "operationId": "CustomFiles/uploadCustomFile",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "format": "binary"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Custom file uploaded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomFileGenericResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse8bcf587f3909884bda96cd2cad4738668c3d661704b3d77d19e3e4020cb84552"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.customfile.create</code>)"
                    },
                    "413": {
                        "description": "File size too large"
                    }
                },
                "security": [
                    {
                        "Oauth2": [
                            "customfile.write",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Custom files"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\nimport fs from \"fs\";\n\nconst data = fs.readFileSync(\"example.png\").buffer;\n\nconst client = new PrintOne('<YOUR API TOKEN>');\n\nconst file = await client.uploadCustomFile(\"example.png\", data);\n"
                    }
                ]
            }
        },
        "/v2/customfiles/{fileId}/download": {
            "get": {
                "description": "Download a custom file.",
                "operationId": "CustomFiles/downloadCustomFile",
                "parameters": [
                    {
                        "name": "fileId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Custom file as a download stream",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.customfile.read</code>)"
                    },
                    "404": {
                        "description": "Custom file not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse32b50d7afcc8e52b016d5433a28314a46c3d01b27685360f48ad4b154540437a"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Oauth2": [
                            "customfile.read",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Custom files"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\nconst client = new PrintOne('<YOUR API TOKEN>');\n\nconst customFile = /* Get your custom file */;\n\nconst file = await customFile.download();\n"
                    }
                ]
            }
        },
        "/v2/customfiles/{fileId}": {
            "delete": {
                "description": "Delete a custom file.",
                "operationId": "CustomFiles/deleteCustomFile",
                "parameters": [
                    {
                        "name": "fileId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the deleted custom file",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomFileGenericResponseDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.customfile.delete</code>)"
                    },
                    "404": {
                        "description": "Custom file not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse32b50d7afcc8e52b016d5433a28314a46c3d01b27685360f48ad4b154540437a"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Oauth2": [
                            "customfile.write",
                            "live.api.key",
                            "test.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Custom files"
                ],
                "x-codeSamples": [
                    {
                        "lang": "TypeScript",
                        "label": "@print-one/print-one-js",
                        "source": "import { PrintOne } from '@print-one/print-one-js';\n\nconst client = new PrintOne('<YOUR API TOKEN>');\n\nconst customFile = /* Get your custom file */;\n\nawait customFile.delete();\n"
                    }
                ]
            }
        },
        "/v2/oauth/authorize": {
            "get": {
                "operationId": "Oauth/startOauthFlow",
                "parameters": [
                    {
                        "name": "client_id",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "redirect_uri",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "scope",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "state",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "OAuth2"
                ]
            }
        },
        "/v2/oauth/token": {
            "post": {
                "operationId": "Oauth/getToken",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/GetTokenFromAuthorizationCodeRequestDto"
                                    },
                                    {
                                        "$ref": "#/components/schemas/GetTokenFromRefreshTokenRequestDto"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTokenResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "OAuth2"
                ]
            }
        },
        "/v2/oauth/revoke": {
            "post": {
                "operationId": "Oauth/revokeToken",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RevokeTokenRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "OAuth2"
                ]
            }
        },
        "/v2/stamps": {
            "get": {
                "deprecated": false,
                "description": "Get a paginated list of stamps.",
                "operationId": "Stamps/getStamps",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "Number of the page to retrieve. Default is page 1.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "size",
                        "required": false,
                        "in": "query",
                        "deprecated": true,
                        "description": "Number of items per page. Default is 10, max is 50. <b>Deprecation: Use `limit` instead.</b>",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A paginated list of stamps",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/PaginatedResponseDto"
                                        },
                                        {
                                            "properties": {
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/GetStampResponseDto"
                                                    }
                                                },
                                                "previousUrl": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "example": "https://api.print.one/v2/stamps?page=2&size=10"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The pagination query was provided incorrectly",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse6a1ea2613cf2c41bb65e6b9eb34bea04f7ba0c4ac3abeec93be5a78e665f2d6b"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "API Key": []
                    }
                ],
                "summary": "",
                "tags": [
                    "Stamps"
                ]
            },
            "post": {
                "deprecated": false,
                "operationId": "Stamps/addStamp",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "info": {
                                        "type": "object",
                                        "properties": {
                                            "overlay": {
                                                "type": "string"
                                            },
                                            "name": {
                                                "type": "string"
                                            },
                                            "countryId": {
                                                "type": "string"
                                            },
                                            "isDefaultForCountry": {
                                                "type": "boolean"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                },
                "security": [
                    {
                        "API Key": []
                    }
                ],
                "summary": "",
                "tags": [
                    "Stamps"
                ]
            }
        },
        "/v2/stamps/{stampId}": {
            "delete": {
                "deprecated": false,
                "operationId": "Stamps/deleteStamp",
                "parameters": [
                    {
                        "name": "stampId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "security": [
                    {
                        "API Key": []
                    }
                ],
                "summary": "",
                "tags": [
                    "Stamps"
                ]
            }
        },
        "/v2/stamps/{stampId}/default": {
            "patch": {
                "deprecated": false,
                "operationId": "Stamps/setDefaultStamp",
                "parameters": [
                    {
                        "name": "stampId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "security": [
                    {
                        "API Key": []
                    }
                ],
                "summary": "",
                "tags": [
                    "Stamps"
                ]
            },
            "delete": {
                "deprecated": false,
                "operationId": "Stamps/removeDefaultStamp",
                "parameters": [
                    {
                        "name": "stampId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "security": [
                    {
                        "API Key": []
                    }
                ],
                "summary": "",
                "tags": [
                    "Stamps"
                ]
            }
        },
        "/v2/webhooks/secret": {
            "post": {
                "deprecated": false,
                "operationId": "Webhook/getWebhookSecret",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetWebhookSecretResponseDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.webhooks.read</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "webhooks.read",
                            "live.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Webhooks"
                ]
            }
        },
        "/v2/webhooks": {
            "get": {
                "deprecated": false,
                "operationId": "Webhook/getWebhooks",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "List of all registered webhooks",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GetWebhookResponseDto"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.webhooks.read</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "webhooks.read",
                            "live.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Webhooks"
                ]
            },
            "post": {
                "deprecated": false,
                "operationId": "Webhook/createWebhook",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateWebhookRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The created webhook",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateWebhookResponseDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.webhooks.create, all.webhooks.create</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "webhooks.write",
                            "tenant.admin",
                            "live.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Webhooks"
                ]
            }
        },
        "/v2/webhooks/{id}": {
            "get": {
                "deprecated": false,
                "operationId": "Webhook/getWebhook",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested webhook",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetWebhookResponseDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.webhooks.read</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "webhooks.read",
                            "live.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Webhooks"
                ]
            },
            "patch": {
                "deprecated": false,
                "operationId": "Webhook/updateWebhook",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateWebhookRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The updated webhook",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateWebhookResponseDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.webhooks.write</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "webhooks.write",
                            "live.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Webhooks"
                ]
            },
            "delete": {
                "deprecated": false,
                "operationId": "Webhook/deleteWebhook",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The webhook was successfully deleted"
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.webhooks.delete, all.webhooks.delete</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "webhooks.write",
                            "tenant.admin",
                            "live.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Webhooks"
                ]
            }
        },
        "/v2/webhooks/{id}/logs": {
            "get": {
                "deprecated": false,
                "description": "Get a paginated list of logs.",
                "operationId": "Webhook/getWebhookLogs",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "Page number to retrieve. If you provide an invalid value the default page number will be applied'\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ",
                        "schema": {
                            "example": 1,
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of records per page.\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 200\n          </p>\n      <i><b>If provided value is greater than max value, max value will be applied.</b></i>\n      ",
                        "schema": {
                            "example": 20,
                            "type": "number"
                        }
                    },
                    {
                        "name": "filter.event",
                        "required": false,
                        "in": "query",
                        "description": "Filter by event query param.\n          <p>\n             <b>Format: </b> filter.event={$not}:OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$in</li><li>$not</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.status",
                        "required": false,
                        "in": "query",
                        "description": "Filter by status query param.\n          <p>\n             <b>Format: </b> filter.status={$not}:OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$eq</li><li>$not</li></ul>",
                        "schema": {
                            "example": "$eq:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter.createdAt",
                        "required": false,
                        "in": "query",
                        "description": "Filter by createdAt query param.\n          <p>\n             <b>Format: </b> filter.createdAt=OPERATION:VALUE\n          </p>\n          <h4><b>Available Operations:</b></h4><ul><li>$gte</li><li>$gt</li><li>$btw</li><li>$lt</li><li>$lte</li></ul>",
                        "schema": {
                            "example": "$gte:value",
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "required": false,
                        "in": "query",
                        "description": "Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Default Value: </b> createdAt:DESC\n          </p>\n      <h4><b>Available Fields:</b></h4><ul><li>createdAt</li></ul>\n      ",
                        "schema": {
                            "example": "sortBy=id:DESC,createdAt:ASC",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "size",
                        "required": false,
                        "in": "query",
                        "deprecated": true,
                        "description": "Number of items per page. Default is 10, max is 50. <b>Deprecation: Use `limit` instead.</b>",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A paginated list of logs",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/PaginatedResponseDto"
                                        },
                                        {
                                            "properties": {
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/GetWebhookLogsResponseDto"
                                                    }
                                                },
                                                "previousUrl": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "example": "https://api.print.one/v2/logs?page=2&size=10"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The pagination query was provided incorrectly",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse6a1ea2613cf2c41bb65e6b9eb34bea04f7ba0c4ac3abeec93be5a78e665f2d6b"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Request has invalid grant scope, missing one of (<code>own.webhooks.read</code>)"
                    }
                },
                "security": [
                    {
                        "API Key": []
                    },
                    {
                        "Oauth2": [
                            "webhooks.read",
                            "live.api.key"
                        ]
                    }
                ],
                "summary": "",
                "tags": [
                    "Webhooks"
                ]
            }
        }
    },
    "info": {
        "title": "Print.one API",
        "description": "\nThis documentation belongs to Print.one's API.\n\n# Introduction\nThis API is documented in **OpenAPI format**. In addition to standard\nOpenAPI syntax we use a few <a href=\"https://github.com/Redocly/redoc/blob/main/docs/redoc-vendor-extensions.md\" target=\"_blank\">vendor extensions</a>\n\nFor technical information about our API, please consult our <a href=\"https://help.print.one/api\" target=\"_blank\">help center</a> or <a href=\"https://support.print.one\" target=\"_blank\">request support</a>.\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with <a href=\"https://www.w3.org/TR/cors/\" target=\"_blank\">W3C spec</a>.\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n<SecurityDefinitions />\n\n# Early Access\nSome features are marked as 'Early Access'. This means only a small portion of users have access to these features. We do this to conduct thorough testing before a major release.\nWould you like to gain access to one of our Early Access features? Please raise a <a href=\"https://printone.atlassian.net/servicedesk/customer/portal/1/group/1/create/2?summary=Requesting early access for my organization&description=Hello, I would like to request Early Access for my organization. It concerns the early access feature <<requested feature here>>\">support ticket here</a>, specifying which feature you would like access to.\n\n\n    ",
        "version": "v2",
        "contact": {
            "name": "Print.one",
            "url": "https://support.print.one",
            "email": "info@print.one"
        }
    },
    "tags": [
        {
            "name": "A/B tests",
            "x-earlyAccess": true
        },
        {
            "name": "Batches",
            "description": "Batches are a new way of placing orders in bulk."
        },
        {
            "name": "Orders"
        },
        {
            "name": "Templates"
        },
        {
            "name": "Previews"
        },
        {
            "name": "Companies"
        },
        {
            "name": "Countries"
        },
        {
            "name": "Coupons"
        },
        {
            "name": "Custom files"
        },
        {
            "name": "OAuth2"
        },
        {
            "name": "Stamps",
            "x-earlyAccess": true
        },
        {
            "name": "Webhooks",
            "description": "Webhooks report system updates to your own systems."
        },
        {
            "name": "WebhookEvents",
            "description": "You can find more information about webhooks in our <a href=\"https://help.print.one/api/webhooks\" target=\"_blank\">help center</a>.\n\nBelow you can find a list of supported webhook events:\n<ul>\n  <li><a href=\"#operation/order_status_update\">order_status_update</a></li><li><a href=\"#operation/template_preview_rendered\">template_preview_rendered</a></li><li><a href=\"#operation/batch_status_update\">batch_status_update</a></li><li><a href=\"#operation/coupon_code_used\">coupon_code_used</a></li><li><a href=\"#operation/ab_test_order_assigned\">ab_test_order_assigned</a></li><li><a href=\"#operation/qr_code_scanned\">qr_code_scanned</a></li>\n</ul>"
        }
    ],
    "servers": [
        {
            "url": "https://api.print.one"
        }
    ],
    "components": {
        "securitySchemes": {
            "API Key": {
                "type": "apiKey",
                "in": "header",
                "name": "x-api-key"
            },
            "Oauth2": {
                "type": "oauth2",
                "flows": {
                    "authorizationCode": {
                        "authorizationUrl": "https://api.print.one/v2/oauth/authorize",
                        "refreshUrl": "https://api.print.one/v2/oauth/token",
                        "scopes": {
                            "coupons.read": "coupons.read",
                            "coupons.write": "coupons.write",
                            "campaign.read": "campaign.read",
                            "campaign.write": "campaign.write",
                            "company.read": "company.read",
                            "customfile.read": "customfile.read",
                            "customfile.write": "customfile.write",
                            "live.orders.read": "live.orders.read",
                            "live.orders.write": "live.orders.write",
                            "test.orders.read": "test.orders.read",
                            "test.orders.write": "test.orders.write",
                            "draft.orders.read": "draft.orders.read",
                            "draft.orders.write": "draft.orders.write",
                            "template.read": "template.read",
                            "template.write": "template.write",
                            "webhooks.read": "webhooks.read",
                            "webhooks.write": "webhooks.write",
                            "integrations.read": "integrations.read",
                            "ab.test.read": "ab.test.read",
                            "ab.test.write": "ab.test.write",
                            "tracking.event.read": "tracking.event.read",
                            "tracking.event.write": "tracking.event.write",
                            "live.batches.read": "live.batches.read",
                            "live.batches.write": "live.batches.write",
                            "test.batches.read": "test.batches.read",
                            "test.batches.write": "test.batches.write",
                            "tenant.admin": "tenant.admin",
                            "live.api.key": "live.api.key",
                            "test.api.key": "test.api.key"
                        },
                        "tokenUrl": "https://api.print.one/v2/oauth/token"
                    }
                },
                "name": "Oauth2 Bearer Token"
            }
        },
        "schemas": {
            "AbTestOrderDto": {
                "type": "object",
                "properties": {
                    "trackingId": {
                        "type": "string",
                        "description": "Tracking ID",
                        "example": "ABC123DEF456"
                    },
                    "abTestId": {
                        "type": "string",
                        "description": "A/B test id",
                        "example": "abt_1234567890"
                    },
                    "variant": {
                        "type": "string",
                        "description": "Variant",
                        "example": "B"
                    },
                    "companyId": {
                        "type": "string",
                        "description": "Company ID",
                        "example": "1234567890"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Created At",
                        "example": "2025-08-03T08:05:28.933Z"
                    }
                },
                "required": [
                    "trackingId",
                    "abTestId",
                    "variant",
                    "companyId",
                    "createdAt"
                ]
            },
            "Meta": {
                "type": "object",
                "properties": {
                    "filterOptions": {
                        "type": "object",
                        "description": "All filterable options"
                    }
                },
                "required": [
                    "filterOptions"
                ]
            },
            "PaginatedResponseDto": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "number",
                        "example": 3,
                        "description": "Current page number"
                    },
                    "pages": {
                        "type": "number",
                        "example": 3,
                        "description": "Total amount of pages"
                    },
                    "pageSize": {
                        "type": "number",
                        "example": 10,
                        "description": "Amount of entries per page"
                    },
                    "total": {
                        "type": "number",
                        "example": 31,
                        "description": "Total amount of entries"
                    },
                    "data": {
                        "description": "Array of selected items",
                        "type": "array",
                        "items": {
                            "type": "array"
                        }
                    },
                    "filters": {
                        "type": "object",
                        "description": "Applied filters"
                    },
                    "previousUrl": {
                        "type": "string",
                        "description": "Full URL of the previous page.",
                        "nullable": true,
                        "example": "https://api.print.one/v2/example-endpoint?page=2&size=10"
                    },
                    "nextUrl": {
                        "type": "string",
                        "description": "Full URL of the next page",
                        "nullable": true,
                        "example": "https://api.print.one/v2/example-endpoint?page=2&size=10"
                    },
                    "currentUrl": {
                        "type": "string",
                        "description": "Full URL of the current page",
                        "nullable": true,
                        "example": "https://api.print.one/v2/example-endpoint?page=2&size=10"
                    },
                    "meta": {
                        "description": "Pagination metadata",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Meta"
                            }
                        ]
                    }
                },
                "required": [
                    "page",
                    "pages",
                    "pageSize",
                    "total",
                    "data",
                    "filters",
                    "previousUrl",
                    "nextUrl",
                    "currentUrl",
                    "meta"
                ]
            },
            "AbTestTemplateDto": {
                "type": "object",
                "properties": {
                    "abTestId": {
                        "type": "string",
                        "description": "A/B test ID",
                        "example": "abt_1234567890"
                    },
                    "templateId": {
                        "type": "string",
                        "description": "Template ID",
                        "example": "tmpl_1234567890"
                    },
                    "variant": {
                        "type": "string",
                        "description": "Variant",
                        "example": "A"
                    },
                    "orderCount": {
                        "type": "number",
                        "description": "Order Count",
                        "example": 0
                    },
                    "eventCount": {
                        "type": "number",
                        "description": "Conversion Count",
                        "example": 0
                    },
                    "previewIds": {
                        "description": "Preview Id",
                        "example": [
                            "prev_1234567890-1"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "winner": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Winner",
                        "example": "2025-08-03T08:05:31.839Z"
                    },
                    "companyId": {
                        "type": "string",
                        "description": "Company ID",
                        "example": "1234567890"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Updated At",
                        "example": "2025-08-03T08:05:31.839Z"
                    }
                },
                "required": [
                    "abTestId",
                    "templateId",
                    "variant",
                    "orderCount",
                    "eventCount",
                    "previewIds",
                    "winner",
                    "companyId",
                    "updatedAt"
                ]
            },
            "Significance": {
                "type": "object",
                "properties": {}
            },
            "CreateAbTestResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "A/B test ID",
                        "example": "abt_1234567890"
                    },
                    "templateId": {
                        "type": "string",
                        "description": "templateId",
                        "example": "tmpl_1234567890"
                    },
                    "companyId": {
                        "type": "string",
                        "description": "Company ID",
                        "example": "1234567890"
                    },
                    "name": {
                        "type": "string",
                        "description": "name",
                        "example": "Summer Sale"
                    },
                    "hypothesis": {
                        "type": "string",
                        "description": "Hypothesis",
                        "example": "Hypothesis"
                    },
                    "answer": {
                        "type": "string",
                        "description": "Answer",
                        "example": "Answer"
                    },
                    "duration": {
                        "type": "string",
                        "description": "Duration",
                        "example": "6 weeks"
                    },
                    "threshold": {
                        "type": "number",
                        "description": "Threshold",
                        "example": 1400
                    },
                    "orderCount": {
                        "type": "number",
                        "description": "Amount of Orders",
                        "example": 200
                    },
                    "eventCount": {
                        "type": "number",
                        "description": "Amount of Events",
                        "example": 200
                    },
                    "status": {
                        "type": "string",
                        "description": "Status",
                        "example": "CREATED"
                    },
                    "batchId": {
                        "type": "string",
                        "description": "Batch ID",
                        "example": "batch_1234567890"
                    },
                    "templates": {
                        "description": "Templates",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AbTestTemplateDto"
                        }
                    },
                    "significance": {
                        "description": "Significance",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Significance"
                            }
                        ]
                    },
                    "startDate": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Start Date",
                        "example": "2025-08-03T08:05:31.840Z"
                    },
                    "endDate": {
                        "format": "date-time",
                        "type": "string",
                        "description": "End Date",
                        "example": "2025-08-03T08:05:31.840Z"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Created At",
                        "example": "2025-08-03T08:05:31.840Z"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Updated At",
                        "example": "2025-08-03T08:05:31.840Z"
                    }
                },
                "required": [
                    "id",
                    "templateId",
                    "companyId",
                    "name",
                    "hypothesis",
                    "answer",
                    "duration",
                    "threshold",
                    "orderCount",
                    "eventCount",
                    "status",
                    "batchId",
                    "templates",
                    "significance",
                    "startDate",
                    "endDate",
                    "createdAt",
                    "updatedAt"
                ]
            },
            "ErrorResponse6a1ea2613cf2c41bb65e6b9eb34bea04f7ba0c4ac3abeec93be5a78e665f2d6b": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 400
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "Invalid paginated query provided"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "V3ErrorResponseDto": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "number",
                        "description": "HTTP status code associated with the error message",
                        "enum": [
                            100,
                            101,
                            102,
                            103,
                            200,
                            201,
                            202,
                            203,
                            204,
                            205,
                            206,
                            207,
                            208,
                            210,
                            300,
                            301,
                            302,
                            303,
                            304,
                            307,
                            308,
                            400,
                            401,
                            402,
                            403,
                            404,
                            405,
                            406,
                            407,
                            408,
                            409,
                            410,
                            411,
                            412,
                            413,
                            414,
                            415,
                            416,
                            417,
                            418,
                            421,
                            422,
                            423,
                            424,
                            428,
                            429,
                            456,
                            500,
                            501,
                            502,
                            503,
                            504,
                            505,
                            507,
                            508
                        ]
                    },
                    "message": {
                        "type": "string",
                        "description": "Message describing the error",
                        "example": "Something went wrong"
                    },
                    "code": {
                        "type": "string",
                        "description": "Unique code to backtrace the type of error",
                        "example": -1,
                        "enum": [
                            "10001",
                            "10002",
                            "10003",
                            "10004",
                            "10005",
                            "10006",
                            "10007",
                            "10008",
                            "10009",
                            "10010",
                            "10011",
                            "10012",
                            "10013",
                            "10014",
                            "10015",
                            "10016",
                            "10017",
                            "10019",
                            "10020",
                            "10021",
                            "10022",
                            "10023",
                            "10024",
                            "10025",
                            "10026",
                            "10027",
                            "10028",
                            "10029",
                            "10030",
                            "10031",
                            "10032",
                            "10033",
                            "10034",
                            "10035",
                            "10036",
                            "10037",
                            "10038",
                            "10039",
                            "10040",
                            "10041",
                            "10042",
                            "10043",
                            "10044",
                            "10045",
                            "10046",
                            "10047",
                            "10048",
                            "10049",
                            "10050",
                            "10051",
                            "10052",
                            "10053",
                            "10054",
                            "10055",
                            "10056",
                            "10057",
                            "10058",
                            "10059",
                            "10060",
                            "10061",
                            "10062",
                            "10063",
                            "10064",
                            "10065",
                            "10066",
                            "10067",
                            "10068",
                            "10069",
                            "10070",
                            "10071",
                            "10072",
                            "10073",
                            "10074",
                            "10075",
                            "10076",
                            "10077",
                            "10078",
                            "10079",
                            "10080",
                            "10081",
                            "10082",
                            "10083",
                            "10084",
                            "10085",
                            "10086",
                            "10087",
                            "10088",
                            "10089",
                            "10090",
                            "10091",
                            "10092",
                            "10093",
                            "10094",
                            "10095",
                            "10096",
                            "10097",
                            "10098",
                            "10099",
                            "10100",
                            "10101",
                            "10102",
                            "10103",
                            "10104",
                            "10105",
                            "10106",
                            "10107",
                            "10108",
                            "10109",
                            "10110",
                            "10111",
                            "10112",
                            "10113",
                            "10114",
                            "10115",
                            "10116",
                            "10117",
                            "10118",
                            "10119",
                            "10120",
                            "10121",
                            "10122",
                            "10123",
                            "10124",
                            "10125",
                            "10126",
                            "10127",
                            "10128",
                            "10129",
                            "10130",
                            "10131",
                            "10132",
                            "10133",
                            "10134",
                            "10135",
                            "10136",
                            "10137",
                            "10138",
                            "10139",
                            "10140",
                            "10141",
                            "10142",
                            "10143",
                            "10144",
                            "10145",
                            "10146",
                            "10147",
                            "10148",
                            "10149",
                            "10150",
                            "10151",
                            "10152",
                            "10153",
                            "10154",
                            "10155"
                        ]
                    },
                    "uri": {
                        "type": "string",
                        "description": "The requested URL",
                        "example": "https://api.print.one/v3/some-url?filter.query=$eq:value"
                    }
                },
                "required": [
                    "status",
                    "message",
                    "code",
                    "uri"
                ]
            },
            "V3ErrorDto": {
                "type": "object",
                "properties": {}
            },
            "V3ValidationErrorDto": {
                "type": "object",
                "properties": {}
            },
            "V3ErrorResponse05c43fbcc9553d2004f9498464a5b1e6f3d5ec14903aa2f08d58547bb1c1cd4b": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "number",
                        "description": "HTTP status code associated with the error message",
                        "example": 404
                    },
                    "message": {
                        "type": "string",
                        "description": "Message describing the error",
                        "example": "Country 'Unknown' does not exist"
                    },
                    "code": {
                        "type": "number",
                        "description": "Unique code to backtrace the type of error",
                        "example": 10006
                    },
                    "uri": {
                        "type": "string",
                        "description": "The requested URL",
                        "example": "https://api.print.one/v3/some-url?filter.query=$eq:value"
                    }
                },
                "required": [
                    "status",
                    "message",
                    "code",
                    "uri"
                ]
            },
            "V3ResponseDto": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object"
                    }
                },
                "required": [
                    "data"
                ]
            },
            "ValidAddressDto": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The validated address",
                        "example": "Eekwal 3b"
                    },
                    "postalCode": {
                        "type": "string",
                        "description": "The postal code of the address",
                        "example": "8011LD"
                    },
                    "city": {
                        "type": "string",
                        "description": "The city of the address",
                        "example": "Zwolle"
                    },
                    "country": {
                        "type": "string",
                        "description": "The country of the address",
                        "example": "NL"
                    }
                },
                "required": [
                    "address",
                    "postalCode",
                    "city",
                    "country"
                ]
            },
            "ValidateAddressResponseDto": {
                "type": "object",
                "properties": {
                    "valid": {
                        "type": "boolean",
                        "description": "Whether the address is valid",
                        "example": true
                    },
                    "address": {
                        "description": "The validated address",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ValidAddressDto"
                            }
                        ]
                    },
                    "error": {
                        "type": "object",
                        "description": "If the address is not valid, this will contain the error message",
                        "nullable": true
                    }
                },
                "required": [
                    "valid",
                    "address",
                    "error"
                ]
            },
            "ValidateAddressRequestDto": {
                "type": "object",
                "properties": {
                    "country": {
                        "type": "string",
                        "description": "The country ISO code the address is in",
                        "example": "NL"
                    },
                    "postalCode": {
                        "type": "string",
                        "description": "The postal code of the address",
                        "example": "8011LD"
                    },
                    "address": {
                        "type": "string",
                        "description": "The address to validate",
                        "example": "Eekwal 3b"
                    },
                    "city": {
                        "type": "string",
                        "description": "The city of the address",
                        "example": "Zwolle"
                    }
                },
                "required": [
                    "country",
                    "postalCode",
                    "address",
                    "city"
                ]
            },
            "LoginRequestDto": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email address of the user",
                        "example": "example@domain.com"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the user",
                        "example": "SomeStrongPassword"
                    },
                    "remember": {
                        "type": "boolean",
                        "description": "Whether to keep the user signed in for 30 days",
                        "example": true,
                        "default": false
                    },
                    "totp": {
                        "type": "string",
                        "description": "The TOTP code to use for 2FA",
                        "example": "123456"
                    },
                    "tfaBackupCode": {
                        "type": "string",
                        "description": "The backup code to use for 2FA",
                        "example": "123456"
                    }
                },
                "required": [
                    "email",
                    "password"
                ]
            },
            "RegisterCompanyRequestDto": {
                "type": "object",
                "properties": {
                    "companyName": {
                        "type": "string",
                        "description": "The name of the company",
                        "example": "Your Company Name"
                    },
                    "country": {
                        "type": "string",
                        "description": "The country of the company",
                        "example": "NL",
                        "enum": [
                            "NL",
                            "AT",
                            "BE",
                            "BG",
                            "HR",
                            "CY",
                            "CZ",
                            "DK",
                            "EE",
                            "FI",
                            "FR",
                            "DE",
                            "GR",
                            "HU",
                            "IE",
                            "IT",
                            "LV",
                            "LT",
                            "LU",
                            "MT",
                            "XI",
                            "PL",
                            "PT",
                            "RO",
                            "SK",
                            "SI",
                            "CH",
                            "ES",
                            "SE"
                        ]
                    },
                    "firstName": {
                        "type": "string",
                        "description": "The first name of the user",
                        "example": "John"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "The last name of the user",
                        "example": "Doe"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address of the user",
                        "example": "example@domain.com"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the user",
                        "example": "SomeStrongPassword"
                    },
                    "phonePrefix": {
                        "type": "string",
                        "description": "The phone prefix of the user",
                        "example": "+31"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "The phone number of the user",
                        "example": "612345678"
                    }
                },
                "required": [
                    "companyName",
                    "country",
                    "firstName",
                    "lastName",
                    "email",
                    "password"
                ]
            },
            "CreateBatchResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "batch_1234567890",
                        "description": "Unique ID for the batch"
                    },
                    "name": {
                        "type": "string",
                        "example": "string",
                        "description": "Name of the batch"
                    },
                    "billingId": {
                        "type": "string",
                        "example": "campaign-summer-2023",
                        "description": "Unique Billing ID for the batch. Will group the orders on your monthly invoice."
                    },
                    "companyId": {
                        "type": "string",
                        "example": "1234567890",
                        "description": "Unique ID for the company"
                    },
                    "templateId": {
                        "type": "string",
                        "example": "tmpl_1234567890",
                        "description": "Template ID every order of the batch will use"
                    },
                    "finish": {
                        "type": "string",
                        "enum": [
                            "GLOSSY",
                            "MATTE"
                        ],
                        "example": "GLOSSY",
                        "description": "Finish every order of the batch will use"
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "example": "POSTCARD_A6",
                        "description": "Format every order of the batch will use"
                    },
                    "isBillable": {
                        "type": "boolean",
                        "example": true,
                        "description": "Whether the batch will be billed or not. If false, the batch will never be sent and you will never be charged. You can create a test batch with a test API key, or a live batch with a live API key."
                    },
                    "sender": {
                        "type": "object",
                        "example": {
                            "name": "string",
                            "address": "string",
                            "addressLine2": "string",
                            "postalCode": "string",
                            "city": "string",
                            "country": "string"
                        },
                        "description": "Address information of the sender",
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "string",
                                "description": "Name of the sender"
                            },
                            "address": {
                                "type": "string",
                                "example": "string",
                                "description": "Address of the sender"
                            },
                            "addressLine2": {
                                "type": "string",
                                "example": "string",
                                "description": "Address line 2 of the sender"
                            },
                            "postalCode": {
                                "type": "string",
                                "example": "string",
                                "description": "Postal code of the sender"
                            },
                            "city": {
                                "type": "string",
                                "example": "string",
                                "description": "City of the sender"
                            },
                            "country": {
                                "type": "string",
                                "example": "string",
                                "description": "Country of the sender"
                            }
                        }
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "batch_created",
                            "batch_needs_approval",
                            "batch_user_ready",
                            "batch_ready_to_schedule",
                            "batch_scheduling",
                            "batch_scheduled",
                            "batch_printing",
                            "batch_printed",
                            "batch_sent",
                            "batch_cancelled",
                            {
                                "batch_created": "batch_created",
                                "batch_needs_approval": "batch_needs_approval",
                                "batch_user_ready": "batch_user_ready",
                                "batch_ready_to_schedule": "batch_ready_to_schedule",
                                "batch_scheduling": "batch_scheduling",
                                "batch_scheduled": "batch_scheduled",
                                "batch_printing": "batch_printing",
                                "batch_printed": "batch_printed",
                                "batch_sent": "batch_sent",
                                "batch_cancelled": "batch_cancelled"
                            },
                            {
                                "batch_created": 0,
                                "batch_needs_approval": 1,
                                "batch_user_ready": 2,
                                "batch_ready_to_schedule": 3,
                                "batch_scheduling": 4,
                                "batch_scheduled": 5,
                                "batch_printing": 6,
                                "batch_printed": 7,
                                "batch_sent": 8,
                                "batch_cancelled": -10
                            },
                            {
                                "0": "batch_created",
                                "1": "batch_needs_approval",
                                "2": "batch_user_ready",
                                "3": "batch_ready_to_schedule",
                                "4": "batch_scheduling",
                                "5": "batch_scheduled",
                                "6": "batch_printing",
                                "7": "batch_printed",
                                "8": "batch_sent",
                                "-10": "batch_cancelled"
                            },
                            {
                                "batch_created": "BATCH_CREATED",
                                "batch_needs_approval": "BATCH_NEEDS_APPROVAL",
                                "batch_user_ready": "BATCH_USER_READY",
                                "batch_ready_to_schedule": "BATCH_READY_TO_SCHEDULE",
                                "batch_scheduling": "BATCH_SCHEDULING",
                                "batch_scheduled": "BATCH_SCHEDULED",
                                "batch_printing": "BATCH_PRINTING",
                                "batch_printed": "BATCH_PRINTED",
                                "batch_sent": "BATCH_SENT",
                                "batch_cancelled": "BATCH_CANCELLED"
                            },
                            {
                                "BATCH_CREATED": "batch_created",
                                "BATCH_NEEDS_APPROVAL": "batch_needs_approval",
                                "BATCH_USER_READY": "batch_user_ready",
                                "BATCH_READY_TO_SCHEDULE": "batch_ready_to_schedule",
                                "BATCH_SCHEDULING": "batch_scheduling",
                                "BATCH_SCHEDULED": "batch_scheduled",
                                "BATCH_PRINTING": "batch_printing",
                                "BATCH_PRINTED": "batch_printed",
                                "BATCH_SENT": "batch_sent",
                                "BATCH_CANCELLED": "batch_cancelled"
                            },
                            {
                                "Created": "Created",
                                "Needs Approval": "Needs Approval",
                                "Approved": "Approved",
                                "Ready to Schedule": "Ready to Schedule",
                                "Scheduling": "Scheduling",
                                "Scheduled": "Scheduled",
                                "Sent": "Sent",
                                "Cancelled": "Cancelled"
                            },
                            {
                                "batch_created": "Created",
                                "batch_needs_approval": "Needs Approval",
                                "batch_user_ready": "Approved",
                                "batch_ready_to_schedule": "Ready to Schedule",
                                "batch_scheduling": "Scheduling",
                                "batch_scheduled": "Scheduled",
                                "batch_printing": "Sent",
                                "batch_printed": "Sent",
                                "batch_sent": "Sent",
                                "batch_cancelled": "Cancelled"
                            },
                            {
                                "Created": [
                                    "batch_created"
                                ],
                                "Needs Approval": [
                                    "batch_needs_approval"
                                ],
                                "Approved": [
                                    "batch_user_ready"
                                ],
                                "Ready to Schedule": [
                                    "batch_ready_to_schedule"
                                ],
                                "Scheduling": [
                                    "batch_scheduling"
                                ],
                                "Scheduled": [
                                    "batch_scheduled"
                                ],
                                "Sent": [
                                    "batch_printing",
                                    "batch_printed",
                                    "batch_sent"
                                ],
                                "Cancelled": [
                                    "batch_cancelled"
                                ]
                            },
                            null,
                            null,
                            null,
                            null,
                            null,
                            null
                        ],
                        "example": "batch_created",
                        "description": "Current status of the batch. Documentation about the meaning will follow soon."
                    },
                    "orders": {
                        "type": "object",
                        "example": {
                            "processing": 0,
                            "success": 0,
                            "failed": 0,
                            "cancelled": 0
                        },
                        "description": "Count of all statuses of the orders in the batch",
                        "properties": {
                            "processing": {
                                "type": "number",
                                "example": 0,
                                "description": "Count of orders that are being processed"
                            },
                            "success": {
                                "type": "number",
                                "example": 0,
                                "description": "Count of orders that have been successfully sent"
                            },
                            "failed": {
                                "type": "number",
                                "example": 0,
                                "description": "Count of orders that have failed"
                            },
                            "cancelled": {
                                "type": "number",
                                "example": 0,
                                "description": "Count of orders that have been cancelled"
                            }
                        }
                    },
                    "estimatedPrice": {
                        "type": "number",
                        "example": 100,
                        "description": "Estimated price of the batch. This might not be the final price. Orders might fail or be cancelled."
                    },
                    "estimatedTax": {
                        "type": "number",
                        "example": 21,
                        "description": "Estimated tax of the batch. This might not be the final tax. Orders might fail or be cancelled."
                    },
                    "sendDate": {
                        "oneOf": [
                            {
                                "type": "string",
                                "example": "2024-01-01T00:00:00.000Z",
                                "description": "Batch will be sent at this date, or later as soon as the minimum requirements are met"
                            },
                            {
                                "type": "null",
                                "example": null,
                                "description": "A sendDate has not been determined for the batch. Manual action is required before the batch is sent."
                            }
                        ]
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the batch was created"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the batch was last updated"
                    },
                    "archivedAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the batch was archived"
                    },
                    "countryId": {
                        "type": "string",
                        "example": "NL",
                        "description": "The ISO country code of the target country"
                    },
                    "requiredCount": {
                        "type": "number",
                        "example": 300,
                        "description": "The minimum amount of succesful orders for the batch to be sent"
                    },
                    "expectedDeliveryTimeframe": {
                        "example": [
                            "2024-01-03",
                            "2024-01-05"
                        ],
                        "description": "The expected timeframe of when the batch will be delivered",
                        "nullable": true,
                        "type": "array",
                        "items": {
                            "format": "date-time",
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "id",
                    "name",
                    "billingId",
                    "companyId",
                    "templateId",
                    "finish",
                    "format",
                    "isBillable",
                    "sender",
                    "status",
                    "orders",
                    "estimatedPrice",
                    "estimatedTax",
                    "sendDate",
                    "createdAt",
                    "updatedAt",
                    "archivedAt",
                    "countryId",
                    "requiredCount",
                    "expectedDeliveryTimeframe"
                ]
            },
            "AddressDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    },
                    "addressLine2": {
                        "type": "string"
                    },
                    "postalCode": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "address",
                    "postalCode",
                    "city",
                    "country"
                ]
            },
            "CreateBatchRequestDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "string",
                        "description": "Name of the batch, does not need to be unique"
                    },
                    "billingId": {
                        "type": "string",
                        "example": "campaign-summer-2023",
                        "description": "Unique Billing ID for the batch. Will group the orders on your monthly invoice."
                    },
                    "templateId": {
                        "type": "string",
                        "example": "tmpl_1234567890",
                        "description": "Template ID every order of the batch will use"
                    },
                    "finish": {
                        "type": "string",
                        "enum": [
                            "GLOSSY",
                            "MATTE"
                        ],
                        "example": "GLOSSY",
                        "description": "Finish every order of the batch will use"
                    },
                    "ready": {
                        "oneOf": [
                            {
                                "type": "string",
                                "example": "2024-01-01T00:00:00.000Z",
                                "description": "Batch will be sent at this date, or later as soon as the minimum requirements are met"
                            },
                            {
                                "type": "true",
                                "example": true,
                                "description": "The batch will be sent as soon as the minimum requirements are met. Cannot be false. Set to a date or null instead"
                            },
                            {
                                "type": "null",
                                "example": null,
                                "description": "A sendDate has not been determined for the batch. Manual action is required before the batch is sent."
                            }
                        ]
                    },
                    "requiredCount": {
                        "type": "number",
                        "example": 1000,
                        "description": "The minimum amount of orders for the batch to be sent. This is the sum of the processing, success, failed and cancelled orders."
                    },
                    "sender": {
                        "description": "Address information of the sender",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AddressDto"
                            }
                        ]
                    }
                },
                "required": [
                    "name",
                    "templateId",
                    "finish",
                    "ready",
                    "requiredCount"
                ]
            },
            "ErrorResponsecf2bd91cdca5d62b1b1b238c7a6fd5f94018dca99b7afbdd639a52be61cf5456": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 400
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "name should not be empty",
                                "name must be a string"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "ErrorResponsee57c83b2d2e0339550b8044f4236032161936ed3e3131cbe369e6867c02b256c": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 404
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "batch not found"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "UpdateBatchRequestDto": {
                "type": "object",
                "properties": {
                    "ready": {
                        "oneOf": [
                            {
                                "type": "string",
                                "example": "2024-01-01T00:00:00.000Z",
                                "description": "Batch will be sent at this date, or later as soon as the minimum requirements are met"
                            },
                            {
                                "type": "true",
                                "example": true,
                                "description": "The batch will be sent as soon as the minimum requirements are met. Cannot be false. Set to a date or null instead"
                            },
                            {
                                "type": "null",
                                "example": null,
                                "description": "A sendDate has not been determined for the batch. Manual action is required before the batch is sent."
                            }
                        ]
                    },
                    "requiredCount": {
                        "type": "number",
                        "example": 1000,
                        "description": "The minimum amount of orders for the batch to be sent. This is the sum of the processing, success, failed and cancelled orders."
                    }
                },
                "required": [
                    "ready",
                    "requiredCount"
                ]
            },
            "ErrorResponseebd45f598b0c24b473e0752a199790c0e775ead08cd9a36c271ea19e1cc0753f": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 404
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "Batch not found"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "ErrorResponse7bce76fdc61b59be7ec5fe74e8010fa3aaee4c8eb087e4e4a3c103d18311127a": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 412
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "Order is not cancellable anymore"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "CreateOrderResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "ord_1234567890",
                        "description": "Unique ID for the order"
                    },
                    "companyId": {
                        "type": "string",
                        "example": "1234567890",
                        "description": "Unique ID for the company"
                    },
                    "templateId": {
                        "type": "string",
                        "example": "tmpl_1234567890",
                        "description": "Template ID for the order"
                    },
                    "finish": {
                        "type": "string",
                        "enum": [
                            "GLOSSY",
                            "MATTE"
                        ],
                        "example": "GLOSSY",
                        "description": "Finish of the order"
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "example": "POSTCARD_SQ15",
                        "description": "Format of the order. Can be null in the instance of a failed order without a valid design"
                    },
                    "mergeVariables": {
                        "type": "object",
                        "example": {
                            "firstName": "John",
                            "lastName": "Doe"
                        },
                        "additionalProperties": true,
                        "description": "Merge variables for the order"
                    },
                    "sender": {
                        "type": "object",
                        "example": {
                            "name": "string",
                            "address": "string",
                            "addressLine2": "string",
                            "postalCode": "string",
                            "city": "string",
                            "country": "string"
                        },
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "string",
                                "description": "Name of the sender"
                            },
                            "address": {
                                "type": "string",
                                "example": "string",
                                "description": "Address of the sender"
                            },
                            "addressLine2": {
                                "type": "string",
                                "example": "string",
                                "description": "Address line 2 of the sender"
                            },
                            "postalCode": {
                                "type": "string",
                                "example": "string",
                                "description": "Postal code of the sender"
                            },
                            "city": {
                                "type": "string",
                                "example": "string",
                                "description": "City of the sender"
                            },
                            "country": {
                                "type": "string",
                                "example": "string",
                                "description": "Country of the sender"
                            }
                        },
                        "description": "Address information of the sender"
                    },
                    "recipient": {
                        "type": "object",
                        "example": {
                            "name": "string",
                            "address": "string",
                            "addressLine2": "string",
                            "postalCode": "string",
                            "city": "string",
                            "country": "string"
                        },
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "string",
                                "description": "Name of the sender"
                            },
                            "address": {
                                "type": "string",
                                "example": "string",
                                "description": "Address of the sender"
                            },
                            "addressLine2": {
                                "type": "string",
                                "example": "string",
                                "description": "Address line 2 of the sender"
                            },
                            "postalCode": {
                                "type": "string",
                                "example": "string",
                                "description": "Postal code of the sender"
                            },
                            "city": {
                                "type": "string",
                                "example": "string",
                                "description": "City of the sender"
                            },
                            "country": {
                                "type": "string",
                                "example": "string",
                                "description": "Country of the sender"
                            }
                        },
                        "description": "Address information of the recipient"
                    },
                    "definitiveCountryId": {
                        "type": "string",
                        "example": "NL",
                        "description": "Country ID of the order"
                    },
                    "region": {
                        "type": "string",
                        "example": "NETHERLANDS",
                        "description": "Region of the order"
                    },
                    "deliverySpeed": {
                        "type": "string",
                        "enum": [
                            "FAST",
                            "SLOW"
                        ],
                        "example": "FAST",
                        "description": "Delivery speed of the order"
                    },
                    "stampId": {
                        "type": "string",
                        "example": "stmp_1234567890",
                        "description": "ID of the postal stamp that was used for this order. This property is optionally returned and only available as early preview (please apply if you wish to use this function)."
                    },
                    "billingId": {
                        "type": "string",
                        "example": "Campaign name",
                        "description": "Shows up on invoice"
                    },
                    "isBillable": {
                        "type": "boolean",
                        "example": "true",
                        "description": "If the order has to be paid for"
                    },
                    "status": {
                        "type": "string",
                        "example": "order_created",
                        "description": "Status of the order"
                    },
                    "friendlyStatus": {
                        "type": "string",
                        "example": "Success",
                        "description": "Friendly status of the order"
                    },
                    "errors": {
                        "example": [
                            "Error message"
                        ],
                        "description": "Errors of the order",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "warnings": {
                        "example": [
                            "Warning message"
                        ],
                        "description": "Warnings of the order",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "metadata": {
                        "type": "object",
                        "example": {
                            "foo": "bar"
                        },
                        "description": "Metadata set by Print.one",
                        "additionalProperties": true
                    },
                    "sendDate": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the order is scheduled to be sent"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the order was created"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the order was last updated"
                    },
                    "anonymizedAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Timestamp of when the order was anonymized",
                        "nullable": true
                    },
                    "csvOrderId": {
                        "type": "string",
                        "nullable": true,
                        "description": "The ID of the linked CSV order"
                    }
                },
                "required": [
                    "id",
                    "companyId",
                    "templateId",
                    "finish",
                    "format",
                    "mergeVariables",
                    "sender",
                    "recipient",
                    "definitiveCountryId",
                    "region",
                    "deliverySpeed",
                    "billingId",
                    "isBillable",
                    "status",
                    "friendlyStatus",
                    "errors",
                    "warnings",
                    "metadata",
                    "sendDate",
                    "createdAt",
                    "updatedAt",
                    "anonymizedAt",
                    "csvOrderId"
                ]
            },
            "AddBatchOrderRequestDto": {
                "type": "object",
                "properties": {
                    "recipient": {
                        "description": "Address information of the recipient",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AddressDto"
                            },
                            {
                                "$ref": "#/components/schemas/AddressSplitDto"
                            }
                        ]
                    },
                    "mergeVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "firstName": "John",
                            "lastName": "Doe"
                        },
                        "description": "Optional personalization data (can be an empty object)"
                    },
                    "autoGenNextBatch": {
                        "type": "boolean",
                        "example": true,
                        "description": "When set to true, a new batch is automatically generated if the supplied batch no longer accepts orders"
                    }
                },
                "required": [
                    "recipient",
                    "mergeVariables"
                ]
            },
            "AddBatchOrderResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "ord_1234567890",
                        "description": "Unique ID for the order"
                    },
                    "companyId": {
                        "type": "string",
                        "example": "1234567890",
                        "description": "Unique ID for the company"
                    },
                    "templateId": {
                        "type": "string",
                        "example": "tmpl_1234567890",
                        "description": "Template ID for the order"
                    },
                    "finish": {
                        "type": "string",
                        "enum": [
                            "GLOSSY",
                            "MATTE"
                        ],
                        "example": "GLOSSY",
                        "description": "Finish of the order"
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "example": "POSTCARD_SQ15",
                        "description": "Format of the order. Can be null in the instance of a failed order without a valid design"
                    },
                    "mergeVariables": {
                        "type": "object",
                        "example": {
                            "firstName": "John",
                            "lastName": "Doe"
                        },
                        "additionalProperties": true,
                        "description": "Merge variables for the order"
                    },
                    "sender": {
                        "type": "object",
                        "example": {
                            "name": "string",
                            "address": "string",
                            "addressLine2": "string",
                            "postalCode": "string",
                            "city": "string",
                            "country": "string"
                        },
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "string",
                                "description": "Name of the sender"
                            },
                            "address": {
                                "type": "string",
                                "example": "string",
                                "description": "Address of the sender"
                            },
                            "addressLine2": {
                                "type": "string",
                                "example": "string",
                                "description": "Address line 2 of the sender"
                            },
                            "postalCode": {
                                "type": "string",
                                "example": "string",
                                "description": "Postal code of the sender"
                            },
                            "city": {
                                "type": "string",
                                "example": "string",
                                "description": "City of the sender"
                            },
                            "country": {
                                "type": "string",
                                "example": "string",
                                "description": "Country of the sender"
                            }
                        },
                        "description": "Address information of the sender"
                    },
                    "recipient": {
                        "type": "object",
                        "example": {
                            "name": "string",
                            "address": "string",
                            "addressLine2": "string",
                            "postalCode": "string",
                            "city": "string",
                            "country": "string"
                        },
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "string",
                                "description": "Name of the sender"
                            },
                            "address": {
                                "type": "string",
                                "example": "string",
                                "description": "Address of the sender"
                            },
                            "addressLine2": {
                                "type": "string",
                                "example": "string",
                                "description": "Address line 2 of the sender"
                            },
                            "postalCode": {
                                "type": "string",
                                "example": "string",
                                "description": "Postal code of the sender"
                            },
                            "city": {
                                "type": "string",
                                "example": "string",
                                "description": "City of the sender"
                            },
                            "country": {
                                "type": "string",
                                "example": "string",
                                "description": "Country of the sender"
                            }
                        },
                        "description": "Address information of the recipient"
                    },
                    "definitiveCountryId": {
                        "type": "string",
                        "example": "NL",
                        "description": "Country ID of the order"
                    },
                    "region": {
                        "type": "string",
                        "example": "NETHERLANDS",
                        "description": "Region of the order"
                    },
                    "deliverySpeed": {
                        "type": "string",
                        "enum": [
                            "FAST",
                            "SLOW"
                        ],
                        "example": "FAST",
                        "description": "Delivery speed of the order"
                    },
                    "stampId": {
                        "type": "string",
                        "example": "stmp_1234567890",
                        "description": "ID of the postal stamp that was used for this order. This property is optionally returned and only available as early preview (please apply if you wish to use this function)."
                    },
                    "billingId": {
                        "type": "string",
                        "example": "Campaign name",
                        "description": "Shows up on invoice"
                    },
                    "isBillable": {
                        "type": "boolean",
                        "example": "true",
                        "description": "If the order has to be paid for"
                    },
                    "status": {
                        "type": "string",
                        "example": "order_created",
                        "description": "Status of the order"
                    },
                    "friendlyStatus": {
                        "type": "string",
                        "example": "Success",
                        "description": "Friendly status of the order"
                    },
                    "errors": {
                        "example": [
                            "Error message"
                        ],
                        "description": "Errors of the order",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "warnings": {
                        "example": [
                            "Warning message"
                        ],
                        "description": "Warnings of the order",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "metadata": {
                        "type": "object",
                        "example": {
                            "foo": "bar"
                        },
                        "description": "Metadata set by Print.one",
                        "additionalProperties": true
                    },
                    "sendDate": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the order is scheduled to be sent"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the order was created"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the order was last updated"
                    },
                    "anonymizedAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Timestamp of when the order was anonymized",
                        "nullable": true
                    },
                    "csvOrderId": {
                        "type": "string",
                        "nullable": true,
                        "description": "The ID of the linked CSV order"
                    },
                    "batchId": {
                        "type": "string",
                        "example": "string",
                        "description": "ID of the batch this order belongs to"
                    }
                },
                "required": [
                    "id",
                    "companyId",
                    "templateId",
                    "finish",
                    "format",
                    "mergeVariables",
                    "sender",
                    "recipient",
                    "definitiveCountryId",
                    "region",
                    "deliverySpeed",
                    "billingId",
                    "isBillable",
                    "status",
                    "friendlyStatus",
                    "errors",
                    "warnings",
                    "metadata",
                    "sendDate",
                    "createdAt",
                    "updatedAt",
                    "anonymizedAt",
                    "csvOrderId",
                    "batchId"
                ]
            },
            "ErrorResponse1ec3f3bc0b904a1f76c9e55d153475c4794d2c0ac73bcdc20fe219b5a67d5d48": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 400
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "recipient.property excessProperty should not exist",
                                "recipient.name should not be empty",
                                "recipient.name must be a string"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "ErrorResponsecdc081b0263f5f2e6e0ff660cd0a334aa7042a691f79f367a891345532b291dc": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 404
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "order not found"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "ErrorResponse3daa269cf4cadd52b1749c1f095cbcbabd2cec7d55c75394c4c96900a685123b": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 404
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "Order not found"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "ErrorResponse89ca178721d7da5e0a65e255916fe9d7235f5faeae0c31f12f064c21cd38df99": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 412
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "Order is not cancellable yet",
                                "Order is not cancellable anymore"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "UploadBatchCsvResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "csv_n0XXpOItEJkEvnq9l0MBE"
                    },
                    "estimatedOrderCount": {
                        "type": "number",
                        "example": 24
                    },
                    "progressLink": {
                        "type": "string",
                        "example": "https://api.print.one/v2/batches/batch_123456789123/orders/csv/csv_n0XXpOItEJkEvnq9l0MBE"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2023-06-07T12:00:00.000Z"
                    }
                },
                "required": [
                    "id",
                    "estimatedOrderCount",
                    "progressLink",
                    "createdAt"
                ]
            },
            "ErrorResponse44963b0b8df97a088e6a83ac33697d693f711b2eab7c7458590cd34332830c57": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 400
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "Invalid file type, only CSV is accepted"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "BatchCsvOrderDetailsResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "csv_n0XXpOItEJkEvnq9l0MBE"
                    },
                    "estimatedOrderCount": {
                        "type": "number",
                        "example": 24,
                        "description": "Estimated order count based on the amount of CSV rows"
                    },
                    "processedOrderCount": {
                        "type": "number",
                        "example": 16,
                        "description": "Amount of orders that have currently been processed from the CSV"
                    },
                    "failedOrderCount": {
                        "type": "number",
                        "example": 8,
                        "description": "Amount of orders that have failed because of an error during processing order"
                    },
                    "totalOrderCount": {
                        "type": "number",
                        "example": 24,
                        "description": "Sum of both processed and failed orders, could be used to calculate a progress percentage"
                    },
                    "status": {
                        "type": "string",
                        "example": "order_created",
                        "description": "The status of the CSV order"
                    },
                    "friendlyStatus": {
                        "type": "string",
                        "example": "Processing",
                        "description": "The friendly status of the CSV order",
                        "enum": [
                            "Processing",
                            "Success"
                        ]
                    },
                    "mapping": {
                        "type": "object",
                        "example": {
                            "recipient": {
                                "name": "{{firstname}} {{lastname}}",
                                "address": "{{street}} {{housenr}}",
                                "postalCode": "{{zip}}",
                                "city": "{{city}}",
                                "country": "{{country}}"
                            },
                            "mergeVariables": {
                                "greet": "Hello {{firstname}}"
                            },
                            "sendDate": "{{sendDate}}"
                        },
                        "description": "The mapping used for this CSV order"
                    },
                    "templateId": {
                        "type": "string",
                        "example": "tmpl_1234567890",
                        "description": "Template ID for the order"
                    },
                    "finish": {
                        "type": "string",
                        "enum": [
                            "GLOSSY",
                            "MATTE"
                        ],
                        "example": "GLOSSY",
                        "description": "Finish of the order"
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "example": "POSTCARD_SQ15",
                        "description": "Format of the order"
                    },
                    "sender": {
                        "type": "object",
                        "example": {
                            "name": "string",
                            "address": "string",
                            "addressLine2": "string",
                            "postalCode": "string",
                            "city": "string",
                            "country": "string"
                        },
                        "description": "Address information of the sender",
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "string",
                                "description": "Name of the sender"
                            },
                            "address": {
                                "type": "string",
                                "example": "string",
                                "description": "Address of the sender"
                            },
                            "addressLine2": {
                                "type": "string",
                                "example": "string",
                                "description": "Address line 2 of the sender"
                            },
                            "postalCode": {
                                "type": "string",
                                "example": "string",
                                "description": "Postal code of the sender"
                            },
                            "city": {
                                "type": "string",
                                "example": "string",
                                "description": "City of the sender"
                            },
                            "country": {
                                "type": "string",
                                "example": "string",
                                "description": "Country of the sender"
                            }
                        }
                    },
                    "billingId": {
                        "type": "string",
                        "example": "Campaign name",
                        "description": "Shows up on invoice"
                    },
                    "isBillable": {
                        "type": "boolean",
                        "example": "true",
                        "description": "If the csv orders have to be paid for"
                    },
                    "sendDate": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the csv order is scheduled to be sent"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the csv order was created"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the csv order was last updated"
                    },
                    "batchId": {
                        "type": "string",
                        "example": "batch_123456798",
                        "description": "The id of the batch to which the CSV belongs"
                    }
                },
                "required": [
                    "id",
                    "estimatedOrderCount",
                    "processedOrderCount",
                    "failedOrderCount",
                    "totalOrderCount",
                    "status",
                    "friendlyStatus",
                    "mapping",
                    "templateId",
                    "finish",
                    "format",
                    "sender",
                    "billingId",
                    "isBillable",
                    "sendDate",
                    "createdAt",
                    "updatedAt",
                    "batchId"
                ]
            },
            "ErrorResponseab20e843dfc3ddd9c482f4cbccd7fcda0d1747c4f178ca6c770f09ce4e1b3176": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 404
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "CSV order not found"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "AddressSplitDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "addressLine2": {
                        "type": "string"
                    },
                    "postalCode": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string"
                    },
                    "street": {
                        "type": "string"
                    },
                    "houseNumber": {
                        "type": "string"
                    },
                    "houseNumberAddition": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "postalCode",
                    "city",
                    "country",
                    "street",
                    "houseNumber"
                ]
            },
            "CreateOrderRequest": {
                "type": "object",
                "properties": {
                    "sender": {
                        "description": "Address information of the sender",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AddressDto"
                            }
                        ]
                    },
                    "recipient": {
                        "description": "Address information of the recipient",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AddressDto"
                            },
                            {
                                "$ref": "#/components/schemas/AddressSplitDto"
                            }
                        ]
                    },
                    "templateId": {
                        "type": "string",
                        "example": "tmpl_1234567890",
                        "description": "Template ID for the order"
                    },
                    "finish": {
                        "type": "string",
                        "enum": [
                            "GLOSSY",
                            "MATTE"
                        ],
                        "example": "GLOSSY",
                        "description": "Finish of the postcard"
                    },
                    "stampId": {
                        "type": "string",
                        "example": "stmp_1234567890",
                        "description": "ID of the postal stamp you wish to apply on this order. This property is optional and only available as early preview (please apply if you wish to use this function)."
                    },
                    "mergeVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "firstName": "John",
                            "lastName": "Doe"
                        },
                        "description": "Optional personalization data (can be an empty object)"
                    },
                    "billingId": {
                        "type": "string",
                        "example": "my campaign name",
                        "description": "Optional billing ID (shows up on invoice)"
                    },
                    "sendDate": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Optional send date (will be sent immediately if not specified)"
                    },
                    "sendDateOffset": {
                        "type": "number",
                        "example": -2,
                        "description": "Optional offset for the send date"
                    }
                },
                "required": [
                    "recipient",
                    "templateId",
                    "finish",
                    "mergeVariables"
                ]
            },
            "UploadCsvResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "csv_n0XXpOItEJkEvnq9l0MBE"
                    },
                    "estimatedOrderCount": {
                        "type": "number",
                        "example": 24
                    },
                    "progressLink": {
                        "type": "string",
                        "example": "https://api.print.one/v2/orders/csv/csv_n0XXpOItEJkEvnq9l0MBE"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2023-06-07T12:00:00.000Z"
                    }
                },
                "required": [
                    "id",
                    "estimatedOrderCount",
                    "progressLink",
                    "createdAt"
                ]
            },
            "CsvOrderDetailsResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "csv_n0XXpOItEJkEvnq9l0MBE"
                    },
                    "estimatedOrderCount": {
                        "type": "number",
                        "example": 24,
                        "description": "Estimated order count based on the amount of CSV rows"
                    },
                    "processedOrderCount": {
                        "type": "number",
                        "example": 16,
                        "description": "Amount of orders that have currently been processed from the CSV"
                    },
                    "failedOrderCount": {
                        "type": "number",
                        "example": 8,
                        "description": "Amount of orders that have failed because of an error during processing order"
                    },
                    "totalOrderCount": {
                        "type": "number",
                        "example": 24,
                        "description": "Sum of both processed and failed orders, could be used to calculate a progress percentage"
                    },
                    "status": {
                        "type": "string",
                        "example": "order_created",
                        "description": "The status of the CSV order"
                    },
                    "friendlyStatus": {
                        "type": "string",
                        "example": "Processing",
                        "description": "The friendly status of the CSV order",
                        "enum": [
                            "Processing",
                            "Success"
                        ]
                    },
                    "mapping": {
                        "type": "object",
                        "example": {
                            "recipient": {
                                "name": "{{firstname}} {{lastname}}",
                                "address": "{{street}} {{housenr}}",
                                "postalCode": "{{zip}}",
                                "city": "{{city}}",
                                "country": "{{country}}"
                            },
                            "mergeVariables": {
                                "greet": "Hello {{firstname}}"
                            },
                            "sendDate": "{{sendDate}}"
                        },
                        "description": "The mapping used for this CSV order"
                    },
                    "templateId": {
                        "type": "string",
                        "example": "tmpl_1234567890",
                        "description": "Template ID for the order"
                    },
                    "finish": {
                        "type": "string",
                        "enum": [
                            "GLOSSY",
                            "MATTE"
                        ],
                        "example": "GLOSSY",
                        "description": "Finish of the order"
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "example": "POSTCARD_SQ15",
                        "description": "Format of the order"
                    },
                    "sender": {
                        "type": "object",
                        "example": {
                            "name": "string",
                            "address": "string",
                            "addressLine2": "string",
                            "postalCode": "string",
                            "city": "string",
                            "country": "string"
                        },
                        "description": "Address information of the sender",
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "string",
                                "description": "Name of the sender"
                            },
                            "address": {
                                "type": "string",
                                "example": "string",
                                "description": "Address of the sender"
                            },
                            "addressLine2": {
                                "type": "string",
                                "example": "string",
                                "description": "Address line 2 of the sender"
                            },
                            "postalCode": {
                                "type": "string",
                                "example": "string",
                                "description": "Postal code of the sender"
                            },
                            "city": {
                                "type": "string",
                                "example": "string",
                                "description": "City of the sender"
                            },
                            "country": {
                                "type": "string",
                                "example": "string",
                                "description": "Country of the sender"
                            }
                        }
                    },
                    "billingId": {
                        "type": "string",
                        "example": "Campaign name",
                        "description": "Shows up on invoice"
                    },
                    "isBillable": {
                        "type": "boolean",
                        "example": "true",
                        "description": "If the csv orders have to be paid for"
                    },
                    "sendDate": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the csv order is scheduled to be sent"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the csv order was created"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the csv order was last updated"
                    }
                },
                "required": [
                    "id",
                    "estimatedOrderCount",
                    "processedOrderCount",
                    "failedOrderCount",
                    "totalOrderCount",
                    "status",
                    "friendlyStatus",
                    "mapping",
                    "templateId",
                    "finish",
                    "format",
                    "sender",
                    "billingId",
                    "isBillable",
                    "sendDate",
                    "createdAt",
                    "updatedAt"
                ]
            },
            "IncassoReversedDto": {
                "type": "object",
                "properties": {
                    "companyId": {
                        "type": "string",
                        "example": "cmp_123456789",
                        "description": "The ID of the associated company"
                    },
                    "companyName": {
                        "type": "string",
                        "example": "Example",
                        "description": "The name of the associated company"
                    },
                    "amount": {
                        "type": "number",
                        "example": 495,
                        "description": "The amount which was reversed"
                    }
                },
                "required": [
                    "companyId",
                    "companyName",
                    "amount"
                ]
            },
            "IncassoFailedDto": {
                "type": "object",
                "properties": {
                    "companyId": {
                        "type": "string",
                        "example": "cmp_123456789",
                        "description": "The ID of the associated company"
                    },
                    "companyName": {
                        "type": "string",
                        "example": "Example",
                        "description": "The name of the associated company"
                    },
                    "amount": {
                        "type": "number",
                        "example": 495,
                        "description": "The amount which was reversed"
                    }
                },
                "required": [
                    "companyId",
                    "companyName",
                    "amount"
                ]
            },
            "IncassoFailedRequestDto": {
                "type": "object",
                "properties": {
                    "companyId": {
                        "type": "string",
                        "description": "The company ID",
                        "example": "1234567890"
                    },
                    "companyName": {
                        "type": "string",
                        "description": "The company name",
                        "example": "Some Company"
                    },
                    "amount": {
                        "type": "number",
                        "description": "The amount of the transaction in euros",
                        "example": 100
                    }
                },
                "required": [
                    "companyId",
                    "companyName",
                    "amount"
                ]
            },
            "IncassoReversedRequestDto": {
                "type": "object",
                "properties": {
                    "companyId": {
                        "type": "string",
                        "description": "The company ID",
                        "example": "1234567890"
                    },
                    "companyName": {
                        "type": "string",
                        "description": "The company name",
                        "example": "Some Company"
                    },
                    "amount": {
                        "type": "number",
                        "description": "The amount of the transaction in euros",
                        "example": 100
                    }
                },
                "required": [
                    "companyId",
                    "companyName",
                    "amount"
                ]
            },
            "V3ErrorResponsed26eae87829adde551bf4b852f9da6b8c3c2db9b65b8b68870632a2db5f53e00": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "number",
                        "description": "HTTP status code associated with the error message",
                        "example": 403
                    },
                    "message": {
                        "type": "string",
                        "description": "Message describing the error",
                        "example": "Your account does not have access to the early access feature 'campaign'"
                    },
                    "code": {
                        "type": "number",
                        "description": "Unique code to backtrace the type of error",
                        "example": 10037
                    },
                    "uri": {
                        "type": "string",
                        "description": "The requested URL",
                        "example": "https://api.print.one/v3/some-url?filter.query=$eq:value"
                    }
                },
                "required": [
                    "status",
                    "message",
                    "code",
                    "uri"
                ]
            },
            "PaginatedMetaDocumented": {
                "type": "object",
                "properties": {
                    "itemsPerPage": {
                        "type": "number",
                        "title": "Number of items per page"
                    },
                    "totalItems": {
                        "type": "number",
                        "title": "Total number of items"
                    },
                    "currentPage": {
                        "type": "number",
                        "title": "Current requested page"
                    },
                    "totalPages": {
                        "type": "number",
                        "title": "Total number of pages"
                    },
                    "sortBy": {
                        "type": "array",
                        "title": "Sorting by columns",
                        "items": {
                            "type": "array",
                            "items": {
                                "oneOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "string",
                                        "enum": [
                                            "ASC",
                                            "DESC"
                                        ]
                                    }
                                ]
                            }
                        }
                    },
                    "searchBy": {
                        "title": "Search by fields",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "search": {
                        "type": "string",
                        "title": "Search term"
                    },
                    "filter": {
                        "type": "object",
                        "title": "Filters that applied to the query",
                        "required": [],
                        "properties": {}
                    },
                    "filterOptions": {
                        "type": "object",
                        "title": "Filters that applied to the query",
                        "required": [],
                        "properties": {}
                    }
                },
                "required": [
                    "itemsPerPage",
                    "totalItems",
                    "currentPage",
                    "totalPages"
                ]
            },
            "PaginatedLinksDocumented": {
                "type": "object",
                "properties": {
                    "first": {
                        "type": "string",
                        "title": "Link to first page",
                        "nullable": true
                    },
                    "previous": {
                        "type": "string",
                        "title": "Link to previous page",
                        "nullable": true
                    },
                    "current": {
                        "type": "string",
                        "title": "Link to current page"
                    },
                    "next": {
                        "type": "string",
                        "title": "Link to next page",
                        "nullable": true
                    },
                    "last": {
                        "type": "string",
                        "title": "Link to last page",
                        "nullable": true
                    }
                },
                "required": [
                    "current"
                ]
            },
            "PaginatedDocumented": {
                "type": "object",
                "properties": {
                    "data": {
                        "required": [],
                        "title": "Array of items",
                        "properties": {},
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "meta": {
                        "title": "Pagination Metadata",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/PaginatedMetaDocumented"
                            }
                        ]
                    },
                    "links": {
                        "title": "Links to pages",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/PaginatedLinksDocumented"
                            }
                        ]
                    }
                },
                "required": [
                    "meta",
                    "links"
                ]
            },
            "GetCampaignResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the campaign",
                        "example": "cmp_123456789"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Custom ID for the campaign",
                        "example": "my-custom-id"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the campaign",
                        "example": "Welcome Back"
                    },
                    "description": {
                        "type": "object",
                        "description": "The description of the campaign",
                        "example": "A winback campaign with 10EUR discount",
                        "nullable": true
                    },
                    "scheduleType": {
                        "type": "string",
                        "enum": [
                            "continuous",
                            "one-off"
                        ],
                        "example": "continuous",
                        "description": "The type of schedule for the campaign"
                    },
                    "companyId": {
                        "type": "string",
                        "description": "The ID of the company by whom the campaign was created",
                        "example": "company-id"
                    },
                    "stampId": {
                        "type": "object",
                        "description": "The default postal stamp for the campaign",
                        "example": "stmp_123456789",
                        "nullable": true
                    },
                    "sender": {
                        "description": "The default return address for the campaign",
                        "nullable": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AddressDto"
                            }
                        ]
                    },
                    "billingId": {
                        "type": "object",
                        "description": "The billing ID used for the campaign",
                        "example": "sector-a",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "created",
                            "running",
                            "paused",
                            "archived"
                        ],
                        "description": "The status of the campaign",
                        "example": "created"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "description": "The date at which the campaign was created",
                        "example": "2024-01-01T00:00:00.000Z"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string",
                        "description": "The date at which the campaign was last updated",
                        "example": "2024-01-01T00:00:00.000Z"
                    },
                    "archivedAt": {
                        "type": "object",
                        "description": "The date at which the campaign was archived",
                        "example": "2024-01-01T00:00:00.000Z",
                        "nullable": true
                    }
                },
                "required": [
                    "id",
                    "identifier",
                    "name",
                    "description",
                    "scheduleType",
                    "companyId",
                    "stampId",
                    "sender",
                    "billingId",
                    "status",
                    "createdAt",
                    "updatedAt",
                    "archivedAt"
                ]
            },
            "V3ErrorResponse6b3c238ebcf1f3c07cf0e556faa82c6b8fe96840ff4b6b7e9962a2d855843a0b": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "number",
                        "description": "HTTP status code associated with the error message",
                        "example": 404
                    },
                    "message": {
                        "type": "string",
                        "description": "Message describing the error",
                        "example": "Design template '{id}' does not exist"
                    },
                    "code": {
                        "type": "number",
                        "description": "Unique code to backtrace the type of error",
                        "example": 10006
                    },
                    "uri": {
                        "type": "string",
                        "description": "The requested URL",
                        "example": "https://api.print.one/v3/some-url?filter.query=$eq:value"
                    }
                },
                "required": [
                    "status",
                    "message",
                    "code",
                    "uri"
                ]
            },
            "GetDetailedCampaignResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the campaign",
                        "example": "cmp_123456789"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Custom ID for the campaign",
                        "example": "my-custom-id"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the campaign",
                        "example": "Welcome Back"
                    },
                    "description": {
                        "type": "object",
                        "description": "The description of the campaign",
                        "example": "A winback campaign with 10EUR discount",
                        "nullable": true
                    },
                    "scheduleType": {
                        "type": "string",
                        "enum": [
                            "continuous",
                            "one-off"
                        ],
                        "example": "continuous",
                        "description": "The type of schedule for the campaign"
                    },
                    "companyId": {
                        "type": "string",
                        "description": "The ID of the company by whom the campaign was created",
                        "example": "company-id"
                    },
                    "stampId": {
                        "type": "object",
                        "description": "The default postal stamp for the campaign",
                        "example": "stmp_123456789",
                        "nullable": true
                    },
                    "sender": {
                        "description": "The default return address for the campaign",
                        "nullable": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AddressDto"
                            }
                        ]
                    },
                    "billingId": {
                        "type": "object",
                        "description": "The billing ID used for the campaign",
                        "example": "sector-a",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "created",
                            "running",
                            "paused",
                            "archived"
                        ],
                        "description": "The status of the campaign",
                        "example": "created"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "description": "The date at which the campaign was created",
                        "example": "2024-01-01T00:00:00.000Z"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string",
                        "description": "The date at which the campaign was last updated",
                        "example": "2024-01-01T00:00:00.000Z"
                    },
                    "archivedAt": {
                        "type": "object",
                        "description": "The date at which the campaign was archived",
                        "example": "2024-01-01T00:00:00.000Z",
                        "nullable": true
                    }
                },
                "required": [
                    "id",
                    "identifier",
                    "name",
                    "description",
                    "scheduleType",
                    "companyId",
                    "stampId",
                    "sender",
                    "billingId",
                    "status",
                    "createdAt",
                    "updatedAt",
                    "archivedAt"
                ]
            },
            "ContinuousCampaignDestinationDto": {
                "type": "object",
                "properties": {
                    "destination": {
                        "type": "array",
                        "description": "Destination for the campaign",
                        "example": "NETHERLANDS",
                        "items": {
                            "type": "string",
                            "enum": [
                                "NETHERLANDS",
                                "GERMANY",
                                "INTERNATIONAL"
                            ]
                        }
                    },
                    "threshold": {
                        "type": "number",
                        "description": "The threshold for the destination, which determines the minimum number of orders required to trigger the delivery",
                        "example": 10,
                        "minimum": 1
                    },
                    "product": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "description": "The product used for this destination",
                        "example": "POSTCARD_A6"
                    },
                    "finish": {
                        "type": "string",
                        "enum": [
                            "GLOSSY",
                            "MATTE"
                        ],
                        "description": "The finish type for the product used in this destination",
                        "example": "MATTE"
                    },
                    "designId": {
                        "type": "string",
                        "description": "The ID of an existing design used for this destination",
                        "example": "tmpl_1234657890"
                    }
                },
                "required": [
                    "destination",
                    "threshold",
                    "product",
                    "finish"
                ]
            },
            "OneOffCampaignDestinationDto": {
                "type": "object",
                "properties": {
                    "destination": {
                        "type": "array",
                        "description": "Destination for the campaign",
                        "example": "NETHERLANDS",
                        "items": {
                            "type": "string",
                            "enum": [
                                "NETHERLANDS",
                                "GERMANY",
                                "INTERNATIONAL"
                            ]
                        }
                    },
                    "threshold": {
                        "type": "number",
                        "description": "The threshold for the destination, which determines the minimum number of orders required to trigger the delivery",
                        "example": 10,
                        "minimum": 1
                    },
                    "product": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "description": "The product used for this destination",
                        "example": "POSTCARD_A6"
                    },
                    "finish": {
                        "type": "string",
                        "enum": [
                            "GLOSSY",
                            "MATTE"
                        ],
                        "description": "The finish type for the product used in this destination",
                        "example": "MATTE"
                    },
                    "designId": {
                        "type": "string",
                        "description": "The ID of an existing design used for this destination",
                        "example": "tmpl_1234657890"
                    },
                    "deliveryWeekIso": {
                        "type": "number",
                        "description": "The ISO week number for the delivery of the destination",
                        "example": 12
                    },
                    "deliveryWeekYear": {
                        "type": "number",
                        "description": "The ISO year number for the delivery of the destination",
                        "example": 2025
                    },
                    "asapFallback": {
                        "type": "boolean",
                        "description": "Wether the campaign should fall back to ASAP delivery if economy threshold is not met",
                        "example": true
                    }
                },
                "required": [
                    "destination",
                    "threshold",
                    "product",
                    "finish",
                    "deliveryWeekIso",
                    "deliveryWeekYear"
                ]
            },
            "V3ErrorResponse480f5a496560ae4228bb7977ecf29b2c589d7a7aa6b609534566af8cbc229a9e": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "number",
                        "description": "HTTP status code associated with the error message",
                        "example": 409
                    },
                    "message": {
                        "type": "string",
                        "description": "Message describing the error",
                        "example": "The supplied identifier '{identifier}' is already used by a different campaign"
                    },
                    "code": {
                        "type": "number",
                        "description": "Unique code to backtrace the type of error",
                        "example": 10028
                    },
                    "uri": {
                        "type": "string",
                        "description": "The requested URL",
                        "example": "https://api.print.one/v3/some-url?filter.query=$eq:value"
                    }
                },
                "required": [
                    "status",
                    "message",
                    "code",
                    "uri"
                ]
            },
            "CreateCampaignRequestDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the campaign",
                        "example": "Win Back 2024"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Custom ID for the campaign",
                        "example": "win-back-2024"
                    },
                    "destinations": {
                        "description": "List of destinations for the campaign",
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ContinuousCampaignDestinationDto"
                                },
                                {
                                    "$ref": "#/components/schemas/OneOffCampaignDestinationDto"
                                }
                            ]
                        }
                    },
                    "scheduleType": {
                        "type": "string",
                        "enum": [
                            "continuous",
                            "one-off"
                        ],
                        "description": "The type of campaign delivery scheduling",
                        "example": "continuous"
                    }
                },
                "required": [
                    "name",
                    "identifier",
                    "destinations",
                    "scheduleType"
                ]
            },
            "UpdateCampaignRequestDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the campaign",
                        "example": "Win Back 2024"
                    },
                    "description": {
                        "type": "object",
                        "description": "The description of the campaign",
                        "example": "A winback campaign with 10EUR discount",
                        "nullable": true
                    },
                    "cronInterval": {
                        "type": "string",
                        "description": "The interval at which the sending schedule should be configured",
                        "example": "* * TUE,WED"
                    },
                    "threshold": {
                        "type": "number",
                        "description": "The minimum threshold of when to start sending",
                        "example": 5000
                    },
                    "sender": {
                        "description": "The default return address for the campaign",
                        "nullable": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AddressDto"
                            }
                        ]
                    }
                },
                "required": [
                    "name",
                    "description",
                    "cronInterval",
                    "threshold",
                    "sender"
                ]
            },
            "V3ErrorResponsefabf5b7fedb3e62a81c9298b19706249ee128011bf9d94867681020c16f8b741": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "number",
                        "description": "HTTP status code associated with the error message",
                        "example": 412
                    },
                    "message": {
                        "type": "string",
                        "description": "Message describing the error",
                        "example": "Campaign is archived and cannot be changed"
                    },
                    "code": {
                        "type": "number",
                        "description": "Unique code to backtrace the type of error",
                        "example": 10031
                    },
                    "uri": {
                        "type": "string",
                        "description": "The requested URL",
                        "example": "https://api.print.one/v3/some-url?filter.query=$eq:value"
                    }
                },
                "required": [
                    "status",
                    "message",
                    "code",
                    "uri"
                ]
            },
            "GenericCompactDesignV3Dto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Design ID",
                        "example": "tmpl_1234567890"
                    },
                    "destination": {
                        "type": "string",
                        "enum": [
                            "NETHERLANDS",
                            "GERMANY",
                            "INTERNATIONAL"
                        ],
                        "description": "The destination for the design"
                    },
                    "name": {
                        "type": "string",
                        "description": "Design Name",
                        "example": "Greeting Card Design"
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "description": "Design Format",
                        "example": "POSTCARD_SQ15"
                    },
                    "labels": {
                        "description": "The labels that are attached to this design",
                        "example": [
                            "Greeting Card",
                            "Happy"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "mergeVariables": {
                        "description": "The merge variables that are used in this design",
                        "example": [
                            "name"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "thumbnail": {
                        "type": "string",
                        "description": "The thumbnail that represents the first page of the design",
                        "example": "base64 encoded thumbnail"
                    },
                    "apiVersion": {
                        "type": "number",
                        "description": "The API version the design was created with",
                        "example": 2
                    },
                    "version": {
                        "type": "number",
                        "description": "The version of the design. This is incremented every time the design is updated."
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Timestamp of when the design was last updated. To find the createdAt date for designs, request version 1 of your design."
                    }
                },
                "required": [
                    "id",
                    "destination",
                    "name",
                    "format",
                    "labels",
                    "mergeVariables",
                    "thumbnail",
                    "apiVersion",
                    "version",
                    "updatedAt"
                ]
            },
            "V3ErrorResponsebceaf40e8bc3ad264232bf934bcd9570e60bbdf637d677d517fc3b7154d3b52b": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "number",
                        "description": "HTTP status code associated with the error message",
                        "example": 400
                    },
                    "message": {
                        "type": "string",
                        "description": "Message describing the error",
                        "example": "Design creation error"
                    },
                    "code": {
                        "type": "number",
                        "description": "Unique code to backtrace the type of error",
                        "example": 10044
                    },
                    "uri": {
                        "type": "string",
                        "description": "The requested URL",
                        "example": "https://api.print.one/v3/some-url?filter.query=$eq:value"
                    },
                    "errors": {
                        "description": "List of errors",
                        "example": [
                            {
                                "message": "The format 'POSTCARD_A5' requires 3 pages, but 2 were provided",
                                "code": 10015
                            },
                            {
                                "message": "some error",
                                "code": 10046
                            },
                            {
                                "message": "Merge variable \"first name\" is invalid, remove any spaces or consider using \"firstName\" instead",
                                "code": 10054
                            },
                            {
                                "message": "Illegal variable names: 1first, %last",
                                "code": 10059
                            }
                        ],
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/V3ErrorDto"
                                },
                                {
                                    "$ref": "#/components/schemas/V3ValidationErrorDto"
                                }
                            ]
                        }
                    }
                },
                "required": [
                    "status",
                    "message",
                    "code",
                    "uri",
                    "errors"
                ]
            },
            "CreatePageDto": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "Template HTML content",
                        "example": "<h1>Greetings, {{name}}</h1>"
                    }
                },
                "required": [
                    "content"
                ]
            },
            "CreateDesignV3RequestDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Template Name",
                        "example": "Greeting Card Template"
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "description": "Template Format",
                        "example": "POSTCARD_SQ15"
                    },
                    "labels": {
                        "description": "The labels that are attached to this template",
                        "example": [
                            "Greeting Card",
                            "Happy"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "pages": {
                        "description": "The pages that are attached to this template",
                        "example": [
                            {
                                "content": "<h1>Greetings on the front of the card, {{name}}</h1>"
                            },
                            {
                                "content": "<h1>Greetings on the back of the card, {{name}}</h1>"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreatePageDto"
                        }
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Whether to make the new design the default for the campaign"
                    }
                },
                "required": [
                    "name",
                    "format",
                    "labels",
                    "pages",
                    "default"
                ]
            },
            "V3ErrorResponseb0ebeb57f5a65da537d52a06f59af4d2ae420e57f587885db94581e66ce2cba0": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "number",
                        "description": "HTTP status code associated with the error message",
                        "example": 400
                    },
                    "message": {
                        "type": "string",
                        "description": "Message describing the error",
                        "example": "Design update error"
                    },
                    "code": {
                        "type": "number",
                        "description": "Unique code to backtrace the type of error",
                        "example": 10047
                    },
                    "uri": {
                        "type": "string",
                        "description": "The requested URL",
                        "example": "https://api.print.one/v3/some-url?filter.query=$eq:value"
                    },
                    "errors": {
                        "description": "List of errors",
                        "example": [
                            {
                                "message": "The format 'POSTCARD_A5' requires 3 pages, but 2 were provided",
                                "code": 10015
                            },
                            {
                                "message": "some error",
                                "code": 10046
                            },
                            {
                                "message": "Designs with variants cannot update their format",
                                "code": 10048
                            },
                            {
                                "message": "Merge variable \"first name\" is invalid, remove any spaces or consider using \"firstName\" instead",
                                "code": 10054
                            },
                            {
                                "message": "Illegal variable names: 1first, %last",
                                "code": 10059
                            }
                        ],
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/V3ErrorDto"
                                },
                                {
                                    "$ref": "#/components/schemas/V3ValidationErrorDto"
                                }
                            ]
                        }
                    }
                },
                "required": [
                    "status",
                    "message",
                    "code",
                    "uri",
                    "errors"
                ]
            },
            "V3ErrorResponse26d228663f13a88592a12d16cf9587caab0388b262d6d9f126ed62f9333aca94": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "number",
                        "description": "HTTP status code associated with the error message",
                        "example": 400
                    },
                    "message": {
                        "type": "string",
                        "description": "Message describing the error",
                        "example": "Design is used in an active batch and cannot be deleted"
                    },
                    "code": {
                        "type": "number",
                        "description": "Unique code to backtrace the type of error",
                        "example": 10041
                    },
                    "uri": {
                        "type": "string",
                        "description": "The requested URL",
                        "example": "https://api.print.one/v3/some-url?filter.query=$eq:value"
                    }
                },
                "required": [
                    "status",
                    "message",
                    "code",
                    "uri"
                ]
            },
            "GenericPageV2Dto": {
                "type": "object",
                "properties": {
                    "orderingKey": {
                        "type": "number",
                        "description": "Page number",
                        "example": 1
                    },
                    "friendlyName": {
                        "type": "string",
                        "enum": [
                            "Front",
                            "Back",
                            "Outside",
                            "Inside"
                        ],
                        "description": "Page friendly name",
                        "example": "Front"
                    },
                    "content": {
                        "type": "string",
                        "description": "Template HTML content",
                        "example": "<h1>Greetings, {{name}}</h1>"
                    }
                },
                "required": [
                    "orderingKey",
                    "friendlyName",
                    "content"
                ]
            },
            "GenericDesignV3Dto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Design ID",
                        "example": "tmpl_1234567890"
                    },
                    "destination": {
                        "type": "string",
                        "enum": [
                            "NETHERLANDS",
                            "GERMANY",
                            "INTERNATIONAL"
                        ],
                        "description": "The destination for the design"
                    },
                    "name": {
                        "type": "string",
                        "description": "Design Name",
                        "example": "Greeting Card Design"
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "description": "Design Format",
                        "example": "POSTCARD_SQ15"
                    },
                    "labels": {
                        "description": "The labels that are attached to this design",
                        "example": [
                            "Greeting Card",
                            "Happy"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "mergeVariables": {
                        "description": "The merge variables that are used in this design",
                        "example": [
                            "name"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "thumbnail": {
                        "type": "string",
                        "description": "The thumbnail that represents the first page of the design",
                        "example": "base64 encoded thumbnail"
                    },
                    "apiVersion": {
                        "type": "number",
                        "description": "The API version the design was created with",
                        "example": 2
                    },
                    "version": {
                        "type": "number",
                        "description": "The version of the design. This is incremented every time the design is updated."
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Timestamp of when the design was last updated. To find the createdAt date for designs, request version 1 of your design."
                    },
                    "pages": {
                        "description": "The pages that are attached to this design",
                        "example": [
                            {
                                "orderingKey": 1,
                                "content": "<h1>Greetings on the front of the card, {{name}}</h1>"
                            },
                            {
                                "orderingKey": 2,
                                "content": "<h1>Greetings on the back of the card, {{name}}</h1>"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GenericPageV2Dto"
                        }
                    }
                },
                "required": [
                    "id",
                    "destination",
                    "name",
                    "format",
                    "labels",
                    "mergeVariables",
                    "thumbnail",
                    "apiVersion",
                    "version",
                    "updatedAt",
                    "pages"
                ]
            },
            "UpdateDesignV3RequestDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Template Name",
                        "example": "Greeting Card Template"
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "description": "Template Format",
                        "example": "POSTCARD_SQ15"
                    },
                    "pages": {
                        "description": "The pages that are attached to this template",
                        "example": [
                            {
                                "orderingKey": 1,
                                "content": "<h1>Greetings on the front of the card, {{name}}</h1>"
                            },
                            {
                                "orderingKey": 2,
                                "content": "<h1>Greetings on the back of the card, {{name}}</h1>"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreatePageDto"
                        }
                    },
                    "labels": {
                        "description": "The labels that are attached to this template",
                        "example": [
                            "Greeting Card",
                            "Happy"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Whether to make the design the default for the campaign"
                    }
                },
                "required": [
                    "default"
                ]
            },
            "GenericVariantV2Dto": {
                "type": "object",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "The original ID of the template.",
                        "example": "tmpl_1234567890"
                    },
                    "templateId": {
                        "type": "string",
                        "description": "The actual ID of the variant.",
                        "example": "tmpl_1234567890"
                    },
                    "mergeVariables": {
                        "description": "The merge variables that are used in this template",
                        "example": [
                            "name"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "variantType": {
                        "type": "string",
                        "enum": [
                            "CONTROL",
                            "VARIANT"
                        ],
                        "description": "Variant Type. Control is the default variant, and variants are the variations of the control.",
                        "example": "CONTROL"
                    },
                    "variantName": {
                        "type": "string",
                        "description": "Variant Name.",
                        "example": "Including an arrow pointing to the QR code."
                    }
                },
                "required": [
                    "groupId",
                    "templateId",
                    "mergeVariables",
                    "variantType",
                    "variantName"
                ]
            },
            "GenericCompactTemplateV2Dto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Template ID",
                        "example": "tmpl_1234567890"
                    },
                    "name": {
                        "type": "string",
                        "description": "Template Name",
                        "example": "Greeting Card Template"
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "description": "Template Format",
                        "example": "POSTCARD_SQ15"
                    },
                    "overlay": {
                        "type": "string",
                        "enum": [
                            "POST_NL",
                            "DEUTSCHE_POST"
                        ],
                        "description": "Overlay"
                    },
                    "labels": {
                        "description": "The labels that are attached to this template",
                        "example": [
                            "Greeting Card",
                            "Happy"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "mergeVariables": {
                        "description": "The merge variables that are used in this template",
                        "example": [
                            "name"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "thumbnail": {
                        "type": "string",
                        "description": "The thumbnail that represents the first page of the template",
                        "example": "base64 encoded thumbnail"
                    },
                    "apiVersion": {
                        "type": "number",
                        "description": "The API version the template was created with",
                        "example": 2
                    },
                    "version": {
                        "type": "number",
                        "description": "The version of the template. This is incremented every time the template is updated."
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Timestamp of when the template was last updated. To find the createdAt date for templates, request version 1 of your template."
                    },
                    "variants": {
                        "description": "Array of variants that are attached to this template.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GenericVariantV2Dto"
                        }
                    }
                },
                "required": [
                    "id",
                    "name",
                    "format",
                    "overlay",
                    "labels",
                    "mergeVariables",
                    "thumbnail",
                    "apiVersion",
                    "version",
                    "updatedAt",
                    "variants"
                ]
            },
            "GenericTemplateV2Dto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Template ID",
                        "example": "tmpl_1234567890"
                    },
                    "name": {
                        "type": "string",
                        "description": "Template Name",
                        "example": "Greeting Card Template"
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "description": "Template Format",
                        "example": "POSTCARD_SQ15"
                    },
                    "overlay": {
                        "type": "string",
                        "enum": [
                            "POST_NL",
                            "DEUTSCHE_POST"
                        ],
                        "description": "Overlay"
                    },
                    "labels": {
                        "description": "The labels that are attached to this template",
                        "example": [
                            "Greeting Card",
                            "Happy"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "mergeVariables": {
                        "description": "The merge variables that are used in this template",
                        "example": [
                            "name"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "thumbnail": {
                        "type": "string",
                        "description": "The thumbnail that represents the first page of the template",
                        "example": "base64 encoded thumbnail"
                    },
                    "apiVersion": {
                        "type": "number",
                        "description": "The API version the template was created with",
                        "example": 2
                    },
                    "version": {
                        "type": "number",
                        "description": "The version of the template. This is incremented every time the template is updated."
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Timestamp of when the template was last updated. To find the createdAt date for templates, request version 1 of your template."
                    },
                    "variants": {
                        "description": "Array of variants that are attached to this template.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GenericVariantV2Dto"
                        }
                    },
                    "pages": {
                        "description": "The pages that are attached to this template",
                        "example": [
                            {
                                "orderingKey": 1,
                                "content": "<h1>Greetings on the front of the card, {{name}}</h1>"
                            },
                            {
                                "orderingKey": 2,
                                "content": "<h1>Greetings on the back of the card, {{name}}</h1>"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GenericPageV2Dto"
                        }
                    }
                },
                "required": [
                    "id",
                    "name",
                    "format",
                    "overlay",
                    "labels",
                    "mergeVariables",
                    "thumbnail",
                    "apiVersion",
                    "version",
                    "updatedAt",
                    "variants",
                    "pages"
                ]
            },
            "ErrorResponseabe3dc35713e30395d9ba9f5d7f281eeedab4f3cd9314708b54d49b662406979": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 404
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "Template not found"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "CreateTemplateV2RequestDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Template Name",
                        "example": "Greeting Card Template"
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "description": "Template Format",
                        "example": "POSTCARD_SQ15"
                    },
                    "labels": {
                        "description": "The labels that are attached to this template",
                        "example": [
                            "Greeting Card",
                            "Happy"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "pages": {
                        "description": "The pages that are attached to this template",
                        "example": [
                            {
                                "content": "<h1>Greetings on the front of the card, {{name}}</h1>"
                            },
                            {
                                "content": "<h1>Greetings on the back of the card, {{name}}</h1>"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreatePageDto"
                        }
                    }
                },
                "required": [
                    "name",
                    "format",
                    "labels",
                    "pages"
                ]
            },
            "ErrorResponse16f70e746d93a8ed68d36a4c6bcd8d794f6404d53577a2f2b64eede08ef34daa": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 400
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "name should not be empty",
                                "property excessProperty should not exist"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "PreviewTemplateDetailedRequestDto": {
                "type": "object",
                "properties": {
                    "sender": {
                        "description": "Address information of the sender",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AddressDto"
                            }
                        ]
                    },
                    "recipient": {
                        "description": "Address information of the recipient",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AddressDto"
                            }
                        ]
                    },
                    "mergeVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "firstName": "John",
                            "lastName": "Doe"
                        },
                        "description": "Optional personalization data (can be an empty object)",
                        "required": []
                    }
                }
            },
            "PreviewTemplateResponseDtoItem": {
                "type": "object",
                "properties": {
                    "orderingKey": {
                        "type": "number",
                        "description": "The page number of the template",
                        "example": 1
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to the preview image",
                        "example": "https://api.print.one/v2/storage/preview/prev_abc123456"
                    },
                    "detailsUrl": {
                        "type": "string",
                        "description": "The URL to the details page of the template",
                        "example": "https://api.print.one/v2/storage/preview/prev_abc123456/details"
                    },
                    "warnings": {
                        "type": "string",
                        "description": "Warning messages",
                        "example": [
                            "Some warning message"
                        ]
                    }
                },
                "required": [
                    "orderingKey",
                    "url",
                    "detailsUrl",
                    "warnings"
                ]
            },
            "ErrorResponsed684090820b16c1659bbc8c2f0db80cd44a2c2d196ff53a8fe0e5a12a565fa72": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 400
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "Your template contains the variable 'test', but you did not provide a value for it.",
                                "name should be a string",
                                "coupon_code should be a string"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "UpdateTemplateV2RequestDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Template Name",
                        "example": "Greeting Card Template"
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "description": "Template Format",
                        "example": "POSTCARD_SQ15"
                    },
                    "pages": {
                        "description": "The pages that are attached to this template",
                        "example": [
                            {
                                "orderingKey": 1,
                                "content": "<h1>Greetings on the front of the card, {{name}}</h1>"
                            },
                            {
                                "orderingKey": 2,
                                "content": "<h1>Greetings on the back of the card, {{name}}</h1>"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreatePageDto"
                        }
                    },
                    "labels": {
                        "description": "The labels that are attached to this template",
                        "example": [
                            "Greeting Card",
                            "Happy"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "UpdateTemplateV2ResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Template ID",
                        "example": "tmpl_1234567890"
                    },
                    "name": {
                        "type": "string",
                        "description": "Template Name",
                        "example": "Greeting Card Template"
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "description": "Template Format",
                        "example": "POSTCARD_SQ15"
                    },
                    "overlay": {
                        "type": "string",
                        "enum": [
                            "POST_NL",
                            "DEUTSCHE_POST"
                        ],
                        "description": "Overlay"
                    },
                    "labels": {
                        "description": "The labels that are attached to this template",
                        "example": [
                            "Greeting Card",
                            "Happy"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "mergeVariables": {
                        "description": "The merge variables that are used in this template",
                        "example": [
                            "name"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "thumbnail": {
                        "type": "string",
                        "description": "The thumbnail that represents the first page of the template",
                        "example": "base64 encoded thumbnail"
                    },
                    "apiVersion": {
                        "type": "number",
                        "description": "The API version the template was created with",
                        "example": 2
                    },
                    "version": {
                        "type": "number",
                        "description": "The version of the template. This is incremented every time the template is updated."
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Timestamp of when the template was last updated. To find the createdAt date for templates, request version 1 of your template."
                    },
                    "variants": {
                        "description": "Array of variants that are attached to this template.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GenericVariantV2Dto"
                        }
                    },
                    "pages": {
                        "description": "The pages that are attached to this template",
                        "example": [
                            {
                                "orderingKey": 1,
                                "content": "<h1>Greetings on the front of the card, {{name}}</h1>"
                            },
                            {
                                "orderingKey": 2,
                                "content": "<h1>Greetings on the back of the card, {{name}}</h1>"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GenericPageV2Dto"
                        }
                    }
                },
                "required": [
                    "id",
                    "name",
                    "format",
                    "overlay",
                    "labels",
                    "mergeVariables",
                    "thumbnail",
                    "apiVersion",
                    "version",
                    "updatedAt",
                    "variants",
                    "pages"
                ]
            },
            "DeleteTemplateV2ResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Template ID",
                        "example": "tmpl_1234567890"
                    },
                    "name": {
                        "type": "string",
                        "description": "Template Name",
                        "example": "Greeting Card Template"
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "description": "Template Format",
                        "example": "POSTCARD_SQ15"
                    },
                    "overlay": {
                        "type": "string",
                        "enum": [
                            "POST_NL",
                            "DEUTSCHE_POST"
                        ],
                        "description": "Overlay"
                    },
                    "labels": {
                        "description": "The labels that are attached to this template",
                        "example": [
                            "Greeting Card",
                            "Happy"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "mergeVariables": {
                        "description": "The merge variables that are used in this template",
                        "example": [
                            "name"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "thumbnail": {
                        "type": "string",
                        "description": "The thumbnail that represents the first page of the template",
                        "example": "base64 encoded thumbnail"
                    },
                    "apiVersion": {
                        "type": "number",
                        "description": "The API version the template was created with",
                        "example": 2
                    },
                    "version": {
                        "type": "number",
                        "description": "The version of the template. This is incremented every time the template is updated."
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Timestamp of when the template was last updated. To find the createdAt date for templates, request version 1 of your template."
                    },
                    "variants": {
                        "description": "Array of variants that are attached to this template.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GenericVariantV2Dto"
                        }
                    },
                    "pages": {
                        "description": "The pages that are attached to this template",
                        "example": [
                            {
                                "orderingKey": 1,
                                "content": "<h1>Greetings on the front of the card, {{name}}</h1>"
                            },
                            {
                                "orderingKey": 2,
                                "content": "<h1>Greetings on the back of the card, {{name}}</h1>"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GenericPageV2Dto"
                        }
                    }
                },
                "required": [
                    "id",
                    "name",
                    "format",
                    "overlay",
                    "labels",
                    "mergeVariables",
                    "thumbnail",
                    "apiVersion",
                    "version",
                    "updatedAt",
                    "variants",
                    "pages"
                ]
            },
            "DuplicateTemplateV2RequestDto": {
                "type": "object",
                "properties": {}
            },
            "DuplicateTemplateV2ResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Template ID",
                        "example": "tmpl_1234567890"
                    },
                    "name": {
                        "type": "string",
                        "description": "Template Name",
                        "example": "Greeting Card Template"
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "description": "Template Format",
                        "example": "POSTCARD_SQ15"
                    },
                    "overlay": {
                        "type": "string",
                        "enum": [
                            "POST_NL",
                            "DEUTSCHE_POST"
                        ],
                        "description": "Overlay"
                    },
                    "labels": {
                        "description": "The labels that are attached to this template",
                        "example": [
                            "Greeting Card",
                            "Happy"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "mergeVariables": {
                        "description": "The merge variables that are used in this template",
                        "example": [
                            "name"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "thumbnail": {
                        "type": "string",
                        "description": "The thumbnail that represents the first page of the template",
                        "example": "base64 encoded thumbnail"
                    },
                    "apiVersion": {
                        "type": "number",
                        "description": "The API version the template was created with",
                        "example": 2
                    },
                    "version": {
                        "type": "number",
                        "description": "The version of the template. This is incremented every time the template is updated."
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Timestamp of when the template was last updated. To find the createdAt date for templates, request version 1 of your template."
                    },
                    "variants": {
                        "description": "Array of variants that are attached to this template.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GenericVariantV2Dto"
                        }
                    },
                    "pages": {
                        "description": "The pages that are attached to this template",
                        "example": [
                            {
                                "orderingKey": 1,
                                "content": "<h1>Greetings on the front of the card, {{name}}</h1>"
                            },
                            {
                                "orderingKey": 2,
                                "content": "<h1>Greetings on the back of the card, {{name}}</h1>"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GenericPageV2Dto"
                        }
                    }
                },
                "required": [
                    "id",
                    "name",
                    "format",
                    "overlay",
                    "labels",
                    "mergeVariables",
                    "thumbnail",
                    "apiVersion",
                    "version",
                    "updatedAt",
                    "variants",
                    "pages"
                ]
            },
            "AddCampaignOrderResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "ord_1234567890",
                        "description": "Unique ID for the order"
                    },
                    "companyId": {
                        "type": "string",
                        "example": "1234567890",
                        "description": "Unique ID for the company"
                    },
                    "templateId": {
                        "type": "string",
                        "example": "tmpl_1234567890",
                        "description": "Template ID for the order"
                    },
                    "finish": {
                        "type": "string",
                        "enum": [
                            "GLOSSY",
                            "MATTE"
                        ],
                        "example": "GLOSSY",
                        "description": "Finish of the order"
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "example": "POSTCARD_SQ15",
                        "description": "Format of the order. Can be null in the instance of a failed order without a valid design"
                    },
                    "mergeVariables": {
                        "type": "object",
                        "example": {
                            "firstName": "John",
                            "lastName": "Doe"
                        },
                        "additionalProperties": true,
                        "description": "Merge variables for the order"
                    },
                    "sender": {
                        "type": "object",
                        "example": {
                            "name": "string",
                            "address": "string",
                            "addressLine2": "string",
                            "postalCode": "string",
                            "city": "string",
                            "country": "string"
                        },
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "string",
                                "description": "Name of the sender"
                            },
                            "address": {
                                "type": "string",
                                "example": "string",
                                "description": "Address of the sender"
                            },
                            "addressLine2": {
                                "type": "string",
                                "example": "string",
                                "description": "Address line 2 of the sender"
                            },
                            "postalCode": {
                                "type": "string",
                                "example": "string",
                                "description": "Postal code of the sender"
                            },
                            "city": {
                                "type": "string",
                                "example": "string",
                                "description": "City of the sender"
                            },
                            "country": {
                                "type": "string",
                                "example": "string",
                                "description": "Country of the sender"
                            }
                        },
                        "description": "Address information of the sender"
                    },
                    "recipient": {
                        "type": "object",
                        "example": {
                            "name": "string",
                            "address": "string",
                            "addressLine2": "string",
                            "postalCode": "string",
                            "city": "string",
                            "country": "string"
                        },
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "string",
                                "description": "Name of the sender"
                            },
                            "address": {
                                "type": "string",
                                "example": "string",
                                "description": "Address of the sender"
                            },
                            "addressLine2": {
                                "type": "string",
                                "example": "string",
                                "description": "Address line 2 of the sender"
                            },
                            "postalCode": {
                                "type": "string",
                                "example": "string",
                                "description": "Postal code of the sender"
                            },
                            "city": {
                                "type": "string",
                                "example": "string",
                                "description": "City of the sender"
                            },
                            "country": {
                                "type": "string",
                                "example": "string",
                                "description": "Country of the sender"
                            }
                        },
                        "description": "Address information of the recipient"
                    },
                    "definitiveCountryId": {
                        "type": "string",
                        "example": "NL",
                        "description": "Country ID of the order"
                    },
                    "region": {
                        "type": "string",
                        "example": "NETHERLANDS",
                        "description": "Region of the order"
                    },
                    "deliverySpeed": {
                        "type": "string",
                        "enum": [
                            "FAST",
                            "SLOW"
                        ],
                        "example": "FAST",
                        "description": "Delivery speed of the order"
                    },
                    "stampId": {
                        "type": "string",
                        "example": "stmp_1234567890",
                        "description": "ID of the postal stamp that was used for this order. This property is optionally returned and only available as early preview (please apply if you wish to use this function)."
                    },
                    "billingId": {
                        "type": "string",
                        "example": "Campaign name",
                        "description": "Shows up on invoice"
                    },
                    "status": {
                        "type": "string",
                        "example": "order_created",
                        "description": "Status of the order"
                    },
                    "friendlyStatus": {
                        "type": "string",
                        "example": "Success",
                        "description": "Friendly status of the order"
                    },
                    "errors": {
                        "example": [
                            "Error message"
                        ],
                        "description": "Errors of the order",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "warnings": {
                        "example": [
                            "Warning message"
                        ],
                        "description": "Warnings of the order",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "metadata": {
                        "type": "object",
                        "example": {
                            "foo": "bar"
                        },
                        "description": "Metadata set by Print.one",
                        "additionalProperties": true
                    },
                    "sendDate": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the order is scheduled to be sent"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the order was created"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the order was last updated"
                    },
                    "anonymizedAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Timestamp of when the order was anonymized",
                        "nullable": true
                    },
                    "csvOrderId": {
                        "type": "string",
                        "nullable": true,
                        "description": "The ID of the linked CSV order"
                    },
                    "campaignId": {
                        "type": "string",
                        "example": "string",
                        "description": "ID of the campaign this order belongs to"
                    },
                    "draft": {
                        "type": "boolean",
                        "example": true,
                        "description": "If the order is marked as draft"
                    }
                },
                "required": [
                    "id",
                    "companyId",
                    "templateId",
                    "finish",
                    "format",
                    "mergeVariables",
                    "sender",
                    "recipient",
                    "definitiveCountryId",
                    "region",
                    "deliverySpeed",
                    "billingId",
                    "status",
                    "friendlyStatus",
                    "errors",
                    "warnings",
                    "metadata",
                    "sendDate",
                    "createdAt",
                    "updatedAt",
                    "anonymizedAt",
                    "csvOrderId",
                    "campaignId",
                    "draft"
                ]
            },
            "V3ErrorResponse8f39cbc7d3cf559014bde9e94ce3b38afa62cefb71bdf89738263069b07ee4df": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "number",
                        "description": "HTTP status code associated with the error message",
                        "example": 400
                    },
                    "message": {
                        "type": "string",
                        "description": "Message describing the error",
                        "example": "Could not create order"
                    },
                    "code": {
                        "type": "number",
                        "description": "Unique code to backtrace the type of error",
                        "example": 10003
                    },
                    "uri": {
                        "type": "string",
                        "description": "The requested URL",
                        "example": "https://api.print.one/v3/some-url?filter.query=$eq:value"
                    },
                    "errors": {
                        "description": "List of errors",
                        "example": [
                            {
                                "message": "Design template '<template-id>' does not exist",
                                "code": 10006
                            },
                            {
                                "message": "The product 'POSTCARD_A5' does not support customStamp",
                                "code": 10011
                            },
                            {
                                "message": "The country '<country>' is not supported",
                                "code": 10017
                            },
                            {
                                "message": "The send date must be in the future",
                                "code": 10021
                            },
                            {
                                "message": "The send date must be within one year",
                                "code": 10022
                            },
                            {
                                "message": "Postal stamp '<stamp-id>' is not available for the country '<country>'",
                                "code": 10025
                            },
                            {
                                "message": "Sorry, <some-early-access-feature> is in early access. If you wish to test this feature, please contact our support",
                                "code": 10026
                            },
                            {
                                "message": "The merge variable firstname is missing from the merge variables",
                                "code": 10027
                            },
                            {
                                "message": "Invalid overlay '<overlay-id>'",
                                "code": 10104
                            },
                            {
                                "message": "Stamp '<stamp-id>' has no valid overlays for <country>",
                                "code": 10105
                            },
                            {
                                "message": "You don't have a default postal stamp for country '<country>'",
                                "code": 10106
                            }
                        ],
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/V3ErrorDto"
                                },
                                {
                                    "$ref": "#/components/schemas/V3ValidationErrorDto"
                                }
                            ]
                        }
                    }
                },
                "required": [
                    "status",
                    "message",
                    "code",
                    "uri",
                    "errors"
                ]
            },
            "AddCampaignOrderRequestDto": {
                "type": "object",
                "properties": {
                    "recipient": {
                        "description": "Address information of the recipient",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AddressDto"
                            },
                            {
                                "$ref": "#/components/schemas/AddressSplitDto"
                            }
                        ]
                    },
                    "mergeVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "firstName": "John",
                            "lastName": "Doe"
                        },
                        "description": "Optional personalization data (can be an empty object)"
                    },
                    "draft": {
                        "type": "boolean",
                        "description": "Whether the order should be created as draft first",
                        "example": true
                    }
                },
                "required": [
                    "recipient",
                    "mergeVariables"
                ]
            },
            "ErrorResponse598891ce0935a731ed687d79a3b0cf710e294fb499fd452a4fef3be77f07fbe3": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 412
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "Order is not a draft"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "UploadCampaignCsvResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "csv_n0XXpOItEJkEvnq9l0MBE"
                    },
                    "estimatedOrderCount": {
                        "type": "number",
                        "example": 24
                    },
                    "progressLink": {
                        "type": "string",
                        "example": "https://api.print.one/v3/campaigns/example/orders/csv/csv_n0XXpOItEJkEvnq9l0MBE"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2023-06-07T12:00:00.000Z"
                    }
                },
                "required": [
                    "id",
                    "estimatedOrderCount",
                    "progressLink",
                    "createdAt"
                ]
            },
            "CampaignCsvOrderDetailsResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "csv_n0XXpOItEJkEvnq9l0MBE"
                    },
                    "estimatedOrderCount": {
                        "type": "number",
                        "example": 24,
                        "description": "Estimated order count based on the amount of CSV rows"
                    },
                    "processedOrderCount": {
                        "type": "number",
                        "example": 16,
                        "description": "Amount of orders that have currently been processed from the CSV"
                    },
                    "failedOrderCount": {
                        "type": "number",
                        "example": 8,
                        "description": "Amount of orders that have failed because of an error during processing order"
                    },
                    "totalOrderCount": {
                        "type": "number",
                        "example": 24,
                        "description": "Sum of both processed and failed orders, could be used to calculate a progress percentage"
                    },
                    "status": {
                        "type": "string",
                        "example": "order_created",
                        "description": "The status of the CSV order"
                    },
                    "friendlyStatus": {
                        "type": "string",
                        "example": "Processing",
                        "description": "The friendly status of the CSV order",
                        "enum": [
                            "Processing",
                            "Success"
                        ]
                    },
                    "mapping": {
                        "type": "object",
                        "example": {
                            "recipient": {
                                "name": "{{firstname}} {{lastname}}",
                                "address": "{{street}} {{housenr}}",
                                "postalCode": "{{zip}}",
                                "city": "{{city}}",
                                "country": "{{country}}"
                            },
                            "mergeVariables": {
                                "greet": "Hello {{firstname}}"
                            },
                            "sendDate": "{{sendDate}}"
                        },
                        "description": "The mapping used for this CSV order"
                    },
                    "templateId": {
                        "type": "string",
                        "example": "tmpl_1234567890",
                        "description": "Template ID for the order"
                    },
                    "finish": {
                        "type": "string",
                        "enum": [
                            "GLOSSY",
                            "MATTE"
                        ],
                        "example": "GLOSSY",
                        "description": "Finish of the order"
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "example": "POSTCARD_SQ15",
                        "description": "Format of the order"
                    },
                    "sender": {
                        "type": "object",
                        "example": {
                            "name": "string",
                            "address": "string",
                            "addressLine2": "string",
                            "postalCode": "string",
                            "city": "string",
                            "country": "string"
                        },
                        "description": "Address information of the sender",
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "string",
                                "description": "Name of the sender"
                            },
                            "address": {
                                "type": "string",
                                "example": "string",
                                "description": "Address of the sender"
                            },
                            "addressLine2": {
                                "type": "string",
                                "example": "string",
                                "description": "Address line 2 of the sender"
                            },
                            "postalCode": {
                                "type": "string",
                                "example": "string",
                                "description": "Postal code of the sender"
                            },
                            "city": {
                                "type": "string",
                                "example": "string",
                                "description": "City of the sender"
                            },
                            "country": {
                                "type": "string",
                                "example": "string",
                                "description": "Country of the sender"
                            }
                        }
                    },
                    "billingId": {
                        "type": "string",
                        "example": "Campaign name",
                        "description": "Shows up on invoice"
                    },
                    "sendDate": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the csv order is scheduled to be sent"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the csv order was created"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2021-01-01T00:00:00.000Z",
                        "description": "Date the csv order was last updated"
                    },
                    "campaignId": {
                        "type": "string",
                        "example": "example",
                        "description": "The id of the campaign to which the CSV belongs"
                    },
                    "draft": {
                        "type": "boolean",
                        "example": true,
                        "description": "If the order is marked as draft"
                    }
                },
                "required": [
                    "id",
                    "estimatedOrderCount",
                    "processedOrderCount",
                    "failedOrderCount",
                    "totalOrderCount",
                    "status",
                    "friendlyStatus",
                    "mapping",
                    "templateId",
                    "finish",
                    "format",
                    "sender",
                    "billingId",
                    "sendDate",
                    "createdAt",
                    "updatedAt",
                    "campaignId",
                    "draft"
                ]
            },
            "ErrorResponseaf4eb716a0cc04bb170af2d0a1ab3fcf4229086701db258df190a9181a64cb8f": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 404
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "Order preview not available yet"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "ErrorResponsefd245de3231084a134999a312f84553bb0690be46e1c4378c68e7386031e5e97": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 404
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "Order preview not found"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "GetPreviewDetailsDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the preview",
                        "example": "prev_zUsy4RK6bXSGrn3eqPDku-1"
                    },
                    "templateId": {
                        "type": "string",
                        "description": "The ID of the template the preview was generated for",
                        "example": "tmpl_zUsy4RK6bXSGrn3eqPDku"
                    },
                    "imageUrl": {
                        "type": "string",
                        "description": "The url of where to download the preview",
                        "example": "https://api.print.one/v2/storage/preview/prev_x0Pz2ljSkfRiJdsuxlZ46-1/details"
                    },
                    "errors": {
                        "description": "List of errors that occurred during rending the preview",
                        "example": [
                            "The resource at \"https://example.com/idontexist.png\" returned status code 404."
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "id",
                    "templateId",
                    "imageUrl",
                    "errors"
                ]
            },
            "ErrorResponsebc1f52e280de31cfbcd64b567e8dfa3dd4f36faa05bc42460913c19c0713d1c2": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 404
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "Template preview 'prev_zUsy4RK6bXSGrn3eqPDku-1' not found"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "MailingResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "mail_1234567890",
                        "description": "Unique ID for the mailing"
                    },
                    "templateId": {
                        "type": "string",
                        "example": "tmpl_1234567890",
                        "description": "Template ID for the order"
                    },
                    "finish": {
                        "type": "string",
                        "enum": [
                            "GLOSSY",
                            "MATTE"
                        ],
                        "example": "GLOSSY",
                        "description": "Finish of the order"
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "POSTCARD_A5",
                            "POSTCARD_A6",
                            "POSTCARD_SQ15",
                            "POSTCARD_MAXI",
                            "POSTCARD_DIN_LONG",
                            "GREETINGCARD_SQ14",
                            "LETTER_A4",
                            "SELFMAILER_MAXI"
                        ],
                        "example": "POSTCARD_A6",
                        "description": "Format of the Mailing."
                    },
                    "destination": {
                        "type": "string",
                        "example": "NETHERLANDS",
                        "description": "Destination of the mailing",
                        "enum": [
                            "NETHERLANDS",
                            "GERMANY",
                            "INTERNATIONAL"
                        ]
                    },
                    "orderCount": {
                        "type": "number",
                        "example": 6000,
                        "description": "The number of orders in the mailing"
                    },
                    "costs": {
                        "type": "object",
                        "description": "Costs of the mailing",
                        "additionalProperties": false,
                        "properties": {
                            "total": {
                                "type": "number",
                                "example": 1000,
                                "description": "Total cost of the mailing"
                            },
                            "subtotal": {
                                "type": "number",
                                "example": 800,
                                "description": "Subtotal cost before tax"
                            },
                            "tax": {
                                "type": "number",
                                "example": 200,
                                "description": "Tax applied to the mailing"
                            }
                        }
                    },
                    "deliveryType": {
                        "type": "string",
                        "example": "DRIP",
                        "description": "The type of delivery for the mailing"
                    },
                    "status": {
                        "type": "string",
                        "example": "MAILING_PAID",
                        "description": "The status of the mailing"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2025-08-03T08:05:34.049Z",
                        "description": "The date and time when the mailing was created"
                    }
                },
                "required": [
                    "id",
                    "templateId",
                    "finish",
                    "format",
                    "destination",
                    "orderCount",
                    "costs",
                    "deliveryType",
                    "status",
                    "createdAt"
                ]
            },
            "ErrorResponsebc1007094b8fe66d88b931a8089a44f3b269489b0e96bf29c7a7ec7ef1485b81": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 404
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "mailing not found"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "CompanyOnboardingChangedRequestDto": {
                "type": "object",
                "properties": {
                    "companyId": {
                        "type": "string",
                        "description": "The company ID",
                        "example": "1234567890"
                    },
                    "design_created": {
                        "type": "boolean",
                        "description": "Whether the company created a design",
                        "example": true
                    },
                    "api_key_added": {
                        "type": "boolean",
                        "description": "Whether the company added an API key",
                        "example": true
                    },
                    "email_verified": {
                        "type": "boolean",
                        "description": "Whether the company verified their email",
                        "example": true
                    },
                    "template_preview_generated": {
                        "type": "boolean",
                        "description": "Whether the company generated a template preview",
                        "example": true
                    },
                    "test_order_sent": {
                        "type": "boolean",
                        "description": "Whether the company sent a test order",
                        "example": true
                    },
                    "live_order_sent": {
                        "type": "boolean",
                        "description": "Whether the company sent a live order",
                        "example": true
                    },
                    "balance_topped_up": {
                        "type": "boolean",
                        "description": "Whether the company topped up their balance",
                        "example": true
                    }
                },
                "required": [
                    "companyId",
                    "design_created",
                    "api_key_added",
                    "email_verified",
                    "template_preview_generated",
                    "test_order_sent",
                    "live_order_sent",
                    "balance_topped_up"
                ]
            },
            "CompanySignupRequestDto": {
                "type": "object",
                "properties": {
                    "companyId": {
                        "type": "string",
                        "description": "The company ID",
                        "example": "1234567890"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email of the company",
                        "example": "contact@print.one"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "The firstname of the user who signed up",
                        "example": "John"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "The lastname of the user who signed up",
                        "example": "Doe"
                    },
                    "companyName": {
                        "type": "string",
                        "description": "The name of the company",
                        "example": "Print.one"
                    },
                    "country": {
                        "type": "string",
                        "description": "The country code of the company",
                        "example": "NL"
                    },
                    "phonePrefix": {
                        "type": "string",
                        "description": "The prefix of the user's phone number",
                        "example": "+31"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "The phone number of the user",
                        "example": "612345678"
                    }
                },
                "required": [
                    "companyId",
                    "email",
                    "firstName",
                    "lastName",
                    "companyName",
                    "country",
                    "phonePrefix",
                    "phoneNumber"
                ]
            },
            "CompanyGenericDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID",
                        "example": "5f9f1c9c-9b5e-4b9c-9c9c-9b5e4b9c9c9c"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "First Name",
                        "example": "John"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Last Name",
                        "example": "Doe"
                    },
                    "email": {
                        "type": "email",
                        "description": "Email",
                        "example": "johndoe@example.org"
                    },
                    "invoiceEmail": {
                        "type": "email",
                        "description": "Invoice Email",
                        "example": "foobar@example.com"
                    },
                    "financialContactEmail": {
                        "type": "email",
                        "description": "Financial Contact Email",
                        "example": "foobar@example.com"
                    },
                    "financialContactName": {
                        "type": "string",
                        "description": "Financial Contact Name",
                        "example": "Joe Doe"
                    },
                    "technicalContactEmail": {
                        "type": "email",
                        "description": "Technical Contact Email",
                        "example": "foobar@example.com"
                    },
                    "technicalContactName": {
                        "type": "string",
                        "description": "Financial Contact Name",
                        "example": "Joe Doe"
                    },
                    "phonePrefix": {
                        "type": "string",
                        "description": "Phone Prefix",
                        "example": "+31"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "Phone Number",
                        "example": "0612345678",
                        "minLength": 8,
                        "maxLength": 20
                    },
                    "companyName": {
                        "type": "string",
                        "description": "Company Name",
                        "example": "ACME Inc."
                    },
                    "street": {
                        "type": "string",
                        "description": "Street Name",
                        "example": "Main Street"
                    },
                    "houseNumber": {
                        "type": "string",
                        "description": "House Number",
                        "example": "1"
                    },
                    "secondAddressLine": {
                        "type": "string",
                        "description": "Second address line",
                        "example": "Apt 1B"
                    },
                    "country": {
                        "type": "string",
                        "description": "Country",
                        "example": "Netherlands"
                    },
                    "postalCode": {
                        "type": "string",
                        "description": "Postal Code",
                        "example": "1234AB"
                    },
                    "city": {
                        "type": "string",
                        "description": "City",
                        "example": "Amsterdam"
                    },
                    "returnStreet": {
                        "type": "string",
                        "description": "Postage Return Street Name",
                        "example": "Tree rd."
                    },
                    "returnHouseNumber": {
                        "type": "string",
                        "description": "Postage Return Street Number",
                        "example": "404A"
                    },
                    "returnPostalCode": {
                        "type": "string",
                        "description": "Postage Return Postal Code",
                        "example": "1234 AA"
                    },
                    "returnCity": {
                        "type": "string",
                        "description": "Postage Return City",
                        "example": "Zwolle"
                    },
                    "returnCountry": {
                        "type": "string",
                        "description": "Postage Return Country",
                        "example": "NL"
                    },
                    "returnAddressee": {
                        "type": "string",
                        "description": "Postage Return Addressee",
                        "example": "My Company Ltd"
                    },
                    "cocNumber": {
                        "type": "string",
                        "description": "COC Number",
                        "example": "12345678"
                    },
                    "vatNumber": {
                        "type": "string",
                        "description": "Vat Number",
                        "example": "NL123456789B01"
                    },
                    "iban": {
                        "type": "string",
                        "description": "Bank account Number",
                        "example": "NL12ABCD1234567890"
                    },
                    "canBeBilled": {
                        "type": "boolean",
                        "description": "Can Be Billed",
                        "example": true
                    },
                    "paymentType": {
                        "type": "string",
                        "enum": [
                            "PREPAID",
                            "POSTPAID"
                        ],
                        "description": "What type of payments are made by the company",
                        "example": "POSTPAID"
                    },
                    "planId": {
                        "type": "string",
                        "description": "Plan ID",
                        "example": "PREPAID"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Date at which the company was created",
                        "example": "2020-01-01T00:00:00.000Z"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Date at which the company was last updated",
                        "example": "2020-01-01T00:00:00.000Z"
                    },
                    "emailVerifiedAt": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Date at which the email of the company was verified"
                    },
                    "forceTwoFactor": {
                        "type": "boolean",
                        "description": "Force 2FA for all users in the company",
                        "example": false,
                        "default": false
                    }
                },
                "required": [
                    "id",
                    "firstName",
                    "lastName",
                    "email",
                    "invoiceEmail",
                    "financialContactEmail",
                    "financialContactName",
                    "technicalContactEmail",
                    "technicalContactName",
                    "phonePrefix",
                    "phoneNumber",
                    "companyName",
                    "street",
                    "houseNumber",
                    "secondAddressLine",
                    "country",
                    "postalCode",
                    "city",
                    "returnStreet",
                    "returnHouseNumber",
                    "returnPostalCode",
                    "returnCity",
                    "returnCountry",
                    "returnAddressee",
                    "cocNumber",
                    "vatNumber",
                    "iban",
                    "canBeBilled",
                    "paymentType",
                    "planId",
                    "createdAt",
                    "updatedAt",
                    "emailVerifiedAt",
                    "forceTwoFactor"
                ]
            },
            "CountryResponseDto": {
                "type": "object",
                "properties": {
                    "iso31661Alpha2": {
                        "type": "string",
                        "description": "2 letter ISO country code",
                        "example": "NL"
                    },
                    "iso31661Alpha3": {
                        "type": "string",
                        "description": "3 letter ISO country code",
                        "example": "NLD"
                    },
                    "englishName": {
                        "type": "string",
                        "description": "English name of a country",
                        "example": "Netherlands"
                    },
                    "nativeName": {
                        "type": "string",
                        "description": "Native name of a country",
                        "example": "Nederland"
                    },
                    "alternativeNames": {
                        "description": "Alternative names of a country",
                        "example": [
                            "Pays-Bas",
                            "Niederlande",
                            "Holland"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "supported": {
                        "type": "boolean",
                        "description": "Whether a country is supported"
                    },
                    "internationalDuration": {
                        "type": "string",
                        "description": "Duration in days for shipping to this country",
                        "example": "3-5"
                    }
                },
                "required": [
                    "iso31661Alpha2",
                    "iso31661Alpha3",
                    "englishName",
                    "nativeName",
                    "alternativeNames",
                    "supported",
                    "internationalDuration"
                ]
            },
            "CouponDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "1234567890",
                        "description": "Unique ID for the Coupon"
                    },
                    "name": {
                        "type": "string",
                        "example": "great deal",
                        "description": "Name of the Coupon"
                    },
                    "stats": {
                        "type": "object",
                        "example": {
                            "total": 100,
                            "used": 50,
                            "remaining": 50
                        },
                        "description": "Stats of the Coupon",
                        "properties": {
                            "total": {
                                "type": "number",
                                "example": 100,
                                "description": "Total number of coupons created"
                            },
                            "used": {
                                "type": "number",
                                "example": 50,
                                "description": "Number of coupons used"
                            },
                            "remaining": {
                                "type": "number",
                                "example": 50,
                                "description": "Number of coupons remaining"
                            }
                        }
                    }
                },
                "required": [
                    "id",
                    "name",
                    "stats"
                ]
            },
            "ErrorResponse352c8d6544bab884304b2e571acb970dd2414f1f2488c0c5a84555d639eefb76": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 404
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "Coupon not found"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "CreateCouponDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "great deal",
                        "description": "Name of the Coupon"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CouponCodeDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "1234567890",
                        "description": "Unique ID for the Coupon Code"
                    },
                    "couponId": {
                        "type": "string",
                        "example": "1234567890",
                        "description": "Unique ID for the Coupon"
                    },
                    "code": {
                        "type": "string",
                        "example": "1234567890",
                        "description": "Code of the Coupon"
                    },
                    "used": {
                        "type": "boolean",
                        "example": false,
                        "description": "If the Coupon Code has been used"
                    },
                    "usedAt": {
                        "type": "object",
                        "description": "Date when the Coupon Code was used",
                        "example": "2024-01-01T00:00:00.000Z",
                        "nullable": true
                    },
                    "orderId": {
                        "type": "string",
                        "example": "ord_1234567890",
                        "description": "Order ID where the Coupon Code was used",
                        "nullable": true
                    }
                },
                "required": [
                    "id",
                    "couponId",
                    "code",
                    "used",
                    "usedAt",
                    "orderId"
                ]
            },
            "CustomFileGenericResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "cf_n0XXpOItEJkEvnq9l0MBE",
                        "description": "The id of the file"
                    },
                    "fileName": {
                        "type": "string",
                        "example": "happy_summer_campaign.png",
                        "description": "The name of the file"
                    },
                    "fileExtension": {
                        "type": "string",
                        "example": "png",
                        "description": "The file extension"
                    },
                    "size": {
                        "type": "number",
                        "example": 123456,
                        "description": "The file size in bytes"
                    },
                    "metadata": {
                        "type": "object",
                        "example": {
                            "width": 1920,
                            "height": 1080
                        },
                        "description": "The dimensions of the file"
                    },
                    "companyId": {
                        "type": "string",
                        "description": "The company id"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2023-06-07T12:00:00.000Z",
                        "description": "The date of when the file was uploaded"
                    }
                },
                "required": [
                    "id",
                    "fileName",
                    "fileExtension",
                    "size",
                    "metadata",
                    "companyId",
                    "createdAt"
                ]
            },
            "ErrorResponse32b50d7afcc8e52b016d5433a28314a46c3d01b27685360f48ad4b154540437a": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 404
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "File cf_n0XXpOItEJkEvnq9l0MBE not found"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "ErrorResponse8bcf587f3909884bda96cd2cad4738668c3d661704b3d77d19e3e4020cb84552": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "HTTP status code",
                        "example": 400
                    },
                    "message": {
                        "description": "Error messages",
                        "examples": [
                            [
                                "Invalid file type"
                            ]
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message"
                ]
            },
            "GetTokenFromAuthorizationCodeRequestDto": {
                "type": "object",
                "properties": {
                    "grant_type": {
                        "type": "string",
                        "description": "The type of the code request",
                        "enum": [
                            "authorization_code",
                            "refresh_token"
                        ],
                        "example": "authorization_code"
                    },
                    "client_id": {
                        "type": "string",
                        "description": "The client_id of the oauth client"
                    },
                    "client_secret": {
                        "type": "string",
                        "description": "The client_secret of the oauth client"
                    },
                    "scope": {
                        "type": "string",
                        "description": "Space-delimited list of scopes to request - if not specified defaulted to initial authorize request",
                        "example": "template_read template_write"
                    },
                    "code": {
                        "type": "string",
                        "description": "The authorization-code to use for obtaining a new access-token"
                    },
                    "redirect_uri": {
                        "type": "string",
                        "description": "The redirect_uri which was used to obtain the authorization-code"
                    }
                },
                "required": [
                    "grant_type",
                    "client_id",
                    "client_secret",
                    "scope",
                    "code",
                    "redirect_uri"
                ]
            },
            "GetTokenFromRefreshTokenRequestDto": {
                "type": "object",
                "properties": {
                    "grant_type": {
                        "type": "string",
                        "description": "The type of the code request",
                        "enum": [
                            "authorization_code",
                            "refresh_token"
                        ],
                        "example": "authorization_code"
                    },
                    "client_id": {
                        "type": "string",
                        "description": "The client_id of the oauth client"
                    },
                    "client_secret": {
                        "type": "string",
                        "description": "The client_secret of the oauth client"
                    },
                    "scope": {
                        "type": "string",
                        "description": "Space-delimited list of scopes to request - if not specified defaulted to initial authorize request",
                        "example": "template_read template_write"
                    },
                    "refresh_token": {
                        "type": "string",
                        "description": "The refresh-token to use for obtaining a new access-token"
                    }
                },
                "required": [
                    "grant_type",
                    "client_id",
                    "client_secret",
                    "scope",
                    "refresh_token"
                ]
            },
            "GetTokenResponseDto": {
                "type": "object",
                "properties": {
                    "access_token": {
                        "type": "string",
                        "description": "The access-token",
                        "example": "tk_234567890"
                    },
                    "refresh_token": {
                        "type": "string",
                        "description": "The refresh-token, used to get a new access-token",
                        "example": "rt_2345678987654345678"
                    },
                    "scope": {
                        "type": "string",
                        "description": "space-delimited list of scopes",
                        "example": "template_read template_write"
                    },
                    "token_type": {
                        "type": "string",
                        "description": "The type of the token",
                        "example": "Bearer"
                    },
                    "expires": {
                        "type": "number",
                        "description": "Amount of seconds in which the access token will expire",
                        "example": 3600
                    }
                },
                "required": [
                    "access_token",
                    "refresh_token",
                    "scope",
                    "token_type",
                    "expires"
                ]
            },
            "RevokeTokenRequestDto": {
                "type": "object",
                "properties": {
                    "refresh_token": {
                        "type": "string",
                        "description": "The refresh token to revoke",
                        "example": "iM4aI0aI7XVvCUBAQS9n177QpCY8o918"
                    }
                },
                "required": [
                    "refresh_token"
                ]
            },
            "GetStampResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the stamp"
                    },
                    "companyId": {
                        "type": "string",
                        "description": "The associated company ID",
                        "example": "1234567890"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the stamp",
                        "example": "Custom Stamp"
                    },
                    "countryId": {
                        "type": "string",
                        "description": "The country the stamp should be used for",
                        "example": "NL"
                    },
                    "isDefaultForCountry": {
                        "type": "boolean",
                        "description": "Whether the stamp should be the default for the specified country",
                        "example": true
                    },
                    "signedUrls": {
                        "type": "object",
                        "description": "Map of signed urls for the different variants of the stamp",
                        "example": {
                            "Original": "https://some-link-to-user-image.png",
                            "PostNL_black_NL": "https://some-link-to-generated-stamp-image.png",
                            "PostNL_black_INT": "https://some-link-to-generated-stamp-image.png"
                        }
                    },
                    "overlay": {
                        "type": "string",
                        "description": "The variant of the stamp",
                        "example": "POSTNL_BLACK",
                        "enum": [
                            "POSTNL_BLACK",
                            "POSTNL_BLUE",
                            "POSTNL_GREEN",
                            "POSTNL_RED",
                            "POSTNL_WHITE"
                        ]
                    }
                },
                "required": [
                    "id",
                    "companyId",
                    "name",
                    "countryId",
                    "isDefaultForCountry",
                    "signedUrls",
                    "overlay"
                ]
            },
            "GetWebhookSecretResponseDto": {
                "type": "object",
                "properties": {
                    "secret": {
                        "type": "string",
                        "description": "Secret used for signing webhook payloads",
                        "example": "0YFMgi5yzciEJV2HBL9wKWtNDnos8TaMOqtjSNErnDYWfign0JdW81vpmb6T62r4"
                    }
                },
                "required": [
                    "secret"
                ]
            },
            "GetWebhookResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the webhook"
                    },
                    "name": {
                        "type": "string",
                        "description": "The custom name of the webhook",
                        "example": "Production - Order Updates"
                    },
                    "url": {
                        "type": "string",
                        "description": "The callback of the webhook",
                        "example": "https://api.print.one/some-webhook-callback"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Whether the webhook is active",
                        "example": true
                    },
                    "events": {
                        "type": "array",
                        "description": "List of events to subscribe to",
                        "items": {
                            "type": "string",
                            "enum": [
                                "order_status_update",
                                "template_preview_rendered",
                                "batch_status_update",
                                "coupon_code_used",
                                "ab_test_order_assigned",
                                "incasso_failed",
                                "incasso_reversed",
                                "qr_code_scanned",
                                "company_onboarding_changed",
                                "company_signup"
                            ]
                        }
                    },
                    "headers": {
                        "type": "object",
                        "description": "A map of headers to add to each webhook call",
                        "example": {
                            "CustomEvent": "this-is-a-test"
                        }
                    },
                    "secretHeaders": {
                        "type": "object",
                        "description": "A map of headers with secret values",
                        "example": {
                            "Authorization": "** SecretValue **"
                        }
                    },
                    "successRate": {
                        "type": "object",
                        "description": "Percentage of calls to the webhook that have been successful",
                        "example": 62
                    },
                    "filters": {
                        "description": "Applied filters",
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/SingularWebhookFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/PluralWebhookFilter"
                                }
                            ]
                        }
                    }
                },
                "required": [
                    "id",
                    "name",
                    "url",
                    "active",
                    "events",
                    "headers",
                    "secretHeaders",
                    "successRate"
                ]
            },
            "CreateWebhookRequestDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The custom name of the webhook",
                        "example": "Production - Order Updates"
                    },
                    "url": {
                        "type": "string",
                        "description": "The callback of the webhook",
                        "example": "https://api.print.one/some-webhook-callback"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Whether the webhook is active",
                        "example": true
                    },
                    "headers": {
                        "type": "object",
                        "description": "A map of headers to add to each webhook call",
                        "example": {
                            "CustomEvent": "this-is-a-test"
                        }
                    },
                    "secretHeaders": {
                        "type": "object",
                        "description": "A map of headers with secret values, which will not be visible after saving",
                        "example": {
                            "Authorization": "Basic user:password"
                        }
                    },
                    "events": {
                        "type": "array",
                        "description": "List of events to subscribe to",
                        "items": {
                            "type": "string",
                            "enum": [
                                "order_status_update",
                                "template_preview_rendered",
                                "batch_status_update",
                                "coupon_code_used",
                                "ab_test_order_assigned",
                                "incasso_failed",
                                "incasso_reversed",
                                "qr_code_scanned",
                                "company_onboarding_changed",
                                "company_signup"
                            ]
                        }
                    },
                    "filters": {
                        "description": "Applied filters",
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/SingularWebhookFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/PluralWebhookFilter"
                                }
                            ]
                        }
                    }
                },
                "required": [
                    "name",
                    "url",
                    "active",
                    "events"
                ]
            },
            "CreateWebhookResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the webhook"
                    },
                    "name": {
                        "type": "string",
                        "description": "The custom name of the webhook",
                        "example": "Production - Order Updates"
                    },
                    "url": {
                        "type": "string",
                        "description": "The callback of the webhook",
                        "example": "https://api.print.one/some-webhook-callback"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Whether the webhook is active",
                        "example": true
                    },
                    "events": {
                        "type": "array",
                        "description": "List of events to subscribe to",
                        "items": {
                            "type": "string",
                            "enum": [
                                "order_status_update",
                                "template_preview_rendered",
                                "batch_status_update",
                                "coupon_code_used",
                                "ab_test_order_assigned",
                                "incasso_failed",
                                "incasso_reversed",
                                "qr_code_scanned",
                                "company_onboarding_changed",
                                "company_signup"
                            ]
                        }
                    },
                    "headers": {
                        "type": "object",
                        "description": "A map of headers to add to each webhook call",
                        "example": {
                            "CustomEvent": "this-is-a-test"
                        }
                    },
                    "secretHeaders": {
                        "type": "object",
                        "description": "A map of headers with secret values",
                        "example": {
                            "Authorization": "** SecretValue **"
                        }
                    },
                    "filters": {
                        "description": "Applied filters",
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/SingularWebhookFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/PluralWebhookFilter"
                                }
                            ]
                        }
                    }
                },
                "required": [
                    "id",
                    "name",
                    "url",
                    "active",
                    "events",
                    "headers",
                    "secretHeaders"
                ]
            },
            "SingularWebhookFilter": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The key to compare against",
                        "example": "status"
                    },
                    "event": {
                        "type": "string",
                        "description": "The event the filter should apply on",
                        "example": "order_status_update",
                        "enum": [
                            "order_status_update",
                            "template_preview_rendered",
                            "batch_status_update",
                            "coupon_code_used",
                            "ab_test_order_assigned",
                            "incasso_failed",
                            "incasso_reversed",
                            "qr_code_scanned",
                            "company_onboarding_changed",
                            "company_signup"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "equals",
                            "not-equals"
                        ],
                        "example": "equals"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value to compare against",
                        "example": "order_created"
                    }
                },
                "required": [
                    "key",
                    "event",
                    "type",
                    "value"
                ]
            },
            "PluralWebhookFilter": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The key to compare against",
                        "example": "status"
                    },
                    "event": {
                        "type": "string",
                        "description": "The event the filter should apply on",
                        "example": "order_status_update",
                        "enum": [
                            "order_status_update",
                            "template_preview_rendered",
                            "batch_status_update",
                            "coupon_code_used",
                            "ab_test_order_assigned",
                            "incasso_failed",
                            "incasso_reversed",
                            "qr_code_scanned",
                            "company_onboarding_changed",
                            "company_signup"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "in",
                            "not-in"
                        ],
                        "example": "not-in"
                    },
                    "value": {
                        "description": "The values to compare against",
                        "example": [
                            "order_failed",
                            "order_cancelled"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "key",
                    "event",
                    "type",
                    "value"
                ]
            },
            "UpdateWebhookRequestDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The custom name of the webhook",
                        "example": "Production - Order Updates"
                    },
                    "url": {
                        "type": "string",
                        "description": "The callback of the webhook",
                        "example": "https://api.print.one/some-webhook-callback"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Whether the webhook is active",
                        "example": true
                    },
                    "headers": {
                        "type": "object",
                        "description": "A map of headers to add to each webhook call",
                        "example": {
                            "CustomEvent": "this-is-a-test"
                        }
                    },
                    "secretHeaders": {
                        "type": "object",
                        "description": "A map of headers with secret values, which will not be visible after saving",
                        "example": {
                            "Authorization": "Basic user:password"
                        }
                    },
                    "events": {
                        "type": "array",
                        "description": "List of events to subscribe to",
                        "items": {
                            "type": "string",
                            "enum": [
                                "order_status_update",
                                "template_preview_rendered",
                                "batch_status_update",
                                "coupon_code_used",
                                "ab_test_order_assigned",
                                "incasso_failed",
                                "incasso_reversed",
                                "qr_code_scanned",
                                "company_onboarding_changed",
                                "company_signup"
                            ]
                        }
                    },
                    "filters": {
                        "description": "Applied filters",
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/SingularWebhookFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/PluralWebhookFilter"
                                }
                            ]
                        }
                    }
                }
            },
            "UpdateWebhookResponseDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The custom name of the webhook",
                        "example": "Production - Order Updates"
                    },
                    "url": {
                        "type": "string",
                        "description": "The callback of the webhook",
                        "example": "https://api.print.one/some-webhook-callback"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Whether the webhook is active",
                        "example": true
                    },
                    "headers": {
                        "type": "object",
                        "description": "A map of headers to add to each webhook call",
                        "example": {
                            "CustomEvent": "this-is-a-test"
                        }
                    },
                    "secretHeaders": {
                        "type": "object",
                        "description": "A map of headers with secret values, which will not be visible after saving",
                        "example": {
                            "Authorization": "Basic user:password"
                        }
                    },
                    "events": {
                        "type": "array",
                        "description": "List of events to subscribe to",
                        "items": {
                            "type": "string",
                            "enum": [
                                "order_status_update",
                                "template_preview_rendered",
                                "batch_status_update",
                                "coupon_code_used",
                                "ab_test_order_assigned",
                                "incasso_failed",
                                "incasso_reversed",
                                "qr_code_scanned",
                                "company_onboarding_changed",
                                "company_signup"
                            ]
                        }
                    },
                    "filters": {
                        "description": "Applied filters",
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/SingularWebhookFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/PluralWebhookFilter"
                                }
                            ]
                        }
                    }
                }
            },
            "GetWebhookLogsResponseDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the webhook log"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "success",
                            "failed"
                        ],
                        "description": "The status of the webhook call",
                        "example": "success"
                    },
                    "event": {
                        "type": "string",
                        "description": "The event of the triggered webhook log",
                        "enum": [
                            "order_status_update",
                            "template_preview_rendered",
                            "batch_status_update",
                            "coupon_code_used",
                            "ab_test_order_assigned",
                            "incasso_failed",
                            "incasso_reversed",
                            "qr_code_scanned",
                            "company_onboarding_changed",
                            "company_signup"
                        ]
                    },
                    "request": {
                        "type": "object",
                        "description": "The payload of the request",
                        "example": {
                            "id": "ord_123",
                            "status": "order_created"
                        },
                        "additionalProperties": true
                    },
                    "response": {
                        "type": "object",
                        "description": "The response of the called url",
                        "example": {
                            "status": 201,
                            "body": {
                                "message": "OK!"
                            }
                        },
                        "properties": {
                            "status": {
                                "type": "number",
                                "description": "The status code of the response",
                                "example": 200
                            },
                            "body": {
                                "type": "object",
                                "description": "The body of the response",
                                "example": {
                                    "message": "OK!"
                                },
                                "additionalProperties": true
                            }
                        }
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "description": "The timestamp at which the webhook was triggered",
                        "example": "2024-01-01T00:00:00Z"
                    }
                },
                "required": [
                    "id",
                    "status",
                    "event",
                    "request",
                    "response",
                    "createdAt"
                ]
            }
        }
    },
    "webhooks": {
        "order_status_update": {
            "post": {
                "tags": [
                    "WebhookEvents",
                    "Orders"
                ],
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Webhook-Event",
                        "description": "The event which triggered the webhook",
                        "schema": {
                            "type": "string",
                            "example": "order_status_update"
                        }
                    },
                    {
                        "in": "header",
                        "name": "X-Webhook-HMAC-SHA256",
                        "description": "Encrypted body with your webhook-secret - to verify the webhook request",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "operationId": "order_status_update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/CreateOrderResponse",
                                        "description": "The data sent with the webhook"
                                    },
                                    "event": {
                                        "type": "string",
                                        "description": "The event which triggered the webhook",
                                        "example": "order_status_update"
                                    },
                                    "created_at": {
                                        "type": "string",
                                        "description": "The date at which the webhook was triggered",
                                        "example": "2024-01-01T12:00:00.000Z"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return a 20x status to indicate that the webhook was received successfully"
                    },
                    "400": {
                        "description": "Return a 40x status to indicate that the webhook could not be processed"
                    },
                    "500": {
                        "description": "Return a 50x status to indicate that the webhook could not be processed"
                    }
                }
            }
        },
        "template_preview_rendered": {
            "post": {
                "tags": [
                    "WebhookEvents",
                    "Templates"
                ],
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Webhook-Event",
                        "description": "The event which triggered the webhook",
                        "schema": {
                            "type": "string",
                            "example": "template_preview_rendered"
                        }
                    },
                    {
                        "in": "header",
                        "name": "X-Webhook-HMAC-SHA256",
                        "description": "Encrypted body with your webhook-secret - to verify the webhook request",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "operationId": "template_preview_rendered",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/GetPreviewDetailsDto",
                                        "description": "The data sent with the webhook"
                                    },
                                    "event": {
                                        "type": "string",
                                        "description": "The event which triggered the webhook",
                                        "example": "template_preview_rendered"
                                    },
                                    "created_at": {
                                        "type": "string",
                                        "description": "The date at which the webhook was triggered",
                                        "example": "2024-01-01T12:00:00.000Z"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return a 20x status to indicate that the webhook was received successfully"
                    },
                    "400": {
                        "description": "Return a 40x status to indicate that the webhook could not be processed"
                    },
                    "500": {
                        "description": "Return a 50x status to indicate that the webhook could not be processed"
                    }
                }
            }
        },
        "batch_status_update": {
            "post": {
                "tags": [
                    "WebhookEvents",
                    "Batches"
                ],
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Webhook-Event",
                        "description": "The event which triggered the webhook",
                        "schema": {
                            "type": "string",
                            "example": "batch_status_update"
                        }
                    },
                    {
                        "in": "header",
                        "name": "X-Webhook-HMAC-SHA256",
                        "description": "Encrypted body with your webhook-secret - to verify the webhook request",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "operationId": "batch_status_update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/CreateBatchResponseDto",
                                        "description": "The data sent with the webhook"
                                    },
                                    "event": {
                                        "type": "string",
                                        "description": "The event which triggered the webhook",
                                        "example": "batch_status_update"
                                    },
                                    "created_at": {
                                        "type": "string",
                                        "description": "The date at which the webhook was triggered",
                                        "example": "2024-01-01T12:00:00.000Z"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return a 20x status to indicate that the webhook was received successfully"
                    },
                    "400": {
                        "description": "Return a 40x status to indicate that the webhook could not be processed"
                    },
                    "500": {
                        "description": "Return a 50x status to indicate that the webhook could not be processed"
                    }
                }
            }
        },
        "coupon_code_used": {
            "post": {
                "tags": [
                    "WebhookEvents",
                    "Coupons"
                ],
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Webhook-Event",
                        "description": "The event which triggered the webhook",
                        "schema": {
                            "type": "string",
                            "example": "coupon_code_used"
                        }
                    },
                    {
                        "in": "header",
                        "name": "X-Webhook-HMAC-SHA256",
                        "description": "Encrypted body with your webhook-secret - to verify the webhook request",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "operationId": "coupon_code_used",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/CouponCodeDto",
                                        "description": "The data sent with the webhook"
                                    },
                                    "event": {
                                        "type": "string",
                                        "description": "The event which triggered the webhook",
                                        "example": "coupon_code_used"
                                    },
                                    "created_at": {
                                        "type": "string",
                                        "description": "The date at which the webhook was triggered",
                                        "example": "2024-01-01T12:00:00.000Z"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return a 20x status to indicate that the webhook was received successfully"
                    },
                    "400": {
                        "description": "Return a 40x status to indicate that the webhook could not be processed"
                    },
                    "500": {
                        "description": "Return a 50x status to indicate that the webhook could not be processed"
                    }
                }
            }
        },
        "ab_test_order_assigned": {
            "post": {
                "tags": [
                    "WebhookEvents",
                    "A/B tests"
                ],
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Webhook-Event",
                        "description": "The event which triggered the webhook",
                        "schema": {
                            "type": "string",
                            "example": "ab_test_order_assigned"
                        }
                    },
                    {
                        "in": "header",
                        "name": "X-Webhook-HMAC-SHA256",
                        "description": "Encrypted body with your webhook-secret - to verify the webhook request",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "operationId": "ab_test_order_assigned",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/AbTestOrderDto",
                                        "description": "The data sent with the webhook"
                                    },
                                    "event": {
                                        "type": "string",
                                        "description": "The event which triggered the webhook",
                                        "example": "ab_test_order_assigned"
                                    },
                                    "created_at": {
                                        "type": "string",
                                        "description": "The date at which the webhook was triggered",
                                        "example": "2024-01-01T12:00:00.000Z"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return a 20x status to indicate that the webhook was received successfully"
                    },
                    "400": {
                        "description": "Return a 40x status to indicate that the webhook could not be processed"
                    },
                    "500": {
                        "description": "Return a 50x status to indicate that the webhook could not be processed"
                    }
                }
            }
        },
        "qr_code_scanned": {
            "post": {
                "tags": [
                    "WebhookEvents"
                ],
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Webhook-Event",
                        "description": "The event which triggered the webhook",
                        "schema": {
                            "type": "string",
                            "example": "qr_code_scanned"
                        }
                    },
                    {
                        "in": "header",
                        "name": "X-Webhook-HMAC-SHA256",
                        "description": "Encrypted body with your webhook-secret - to verify the webhook request",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "operationId": "qr_code_scanned",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/CreateOrderResponse",
                                        "description": "The data sent with the webhook"
                                    },
                                    "event": {
                                        "type": "string",
                                        "description": "The event which triggered the webhook",
                                        "example": "qr_code_scanned"
                                    },
                                    "created_at": {
                                        "type": "string",
                                        "description": "The date at which the webhook was triggered",
                                        "example": "2024-01-01T12:00:00.000Z"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return a 20x status to indicate that the webhook was received successfully"
                    },
                    "400": {
                        "description": "Return a 40x status to indicate that the webhook could not be processed"
                    },
                    "500": {
                        "description": "Return a 50x status to indicate that the webhook could not be processed"
                    }
                }
            }
        }
    }
}